
<script type="text/javascript">
\$put("professional", new function() {
	var self = this;
	this.mode;
	this.idno;
	this.prof = {};
  this.selectedItem;
  this.barangayList;

  var app = \$get("app").code;

  this.professions = [];
  this.professions.push("ARCHITECT");
  this.professions.push("CIVIL/STRUCTURAL ENGINEER");
  this.professions.push("REGISTERED ELECTRICAL ENGINEER");
  this.professions.push("PROFESSIONAL MECHANICAL ENGINEER");
  this.professions.push("SANITARY ENGINEER");
  this.professions.push("MASTER PLUMBER");
  this.professions.push("ELECTRONICS ENGINEER");
  this.professions.push("REGISTERED INTERIOR DESIGNER");

  this.professionalList = [];

  var loadList = function() {
    self.professionalList = app.service.getProfessionalList( {appid: app.appid } ); 
  }

  this.findRefno = function() {
    var svc = Service.lookup( app.orgcode + ":OboOnlineService" );
    return svc.findProfessional( {refno: self.idno }, function(s,o) {
      if( s.status == "ERROR" ) {
        self.mode = "entry-not-found";
      }
      else {
        self.prof = o;
        self.mode = "view-entry";
      }
      self._controller.refresh();
    });
  }

  var initEdit = function() {
    if( !self.barangayList ) {
      var bsvc = Service.lookup("CloudPartnerService", "partner");
      self.barangayList = bsvc.getBarangayList( {orgcode: app.orgcode} );
    }
    if( self.prof.resident == null ) self.prof.resident = 1;
    self.mode = "edit-entry";
  }

  this.propertyChangeListener = {
     'prof.resident' : function(v){
        if( v == 1 ) {
          self.prof.address.citymunicipality = app.orgname;
          self.prof.address.province = app.province;
        }
     }
  }

  this.addNew = function() {
    self.prof = { entity: {address: {barangay:{}}, resident: 1} };
    initEdit();
  }

  this.editItem = function() {
    if(!this.selectedItem) throw new Exception("Please select an item");
    self.prof = app.service.getProfessional( {objid: this.selectedItem.objid } );
    initEdit();
  }

  this.removeItem = function() {
    if(!this.selectedItem) throw new Exception("Please select an item");
    var b = confirm("You are about to remove this entry. Proceed?");
    if( b ) {
      app.service.removeProfessional( this.selectedItem );
      loadList();
      self._controller.refresh();
    }
  }

  this.viewInitial = function() {
    self.mode = "initial";
  }

  this.save = function() {
    self.prof.appid = app.appid;
    app.service.saveProfessional( self.prof );
    app.moveNextStep();
    self.mode = "professional";
  }

  this.finish = function() {
    if( self.professionalList.length == 0 ) {
      throw new Error( "Please include at least one professional" );
    }
    app.moveNextStep();
  }

  this.cancelEdit = function() {
    if( !confirm('This will discard all data edited. Proceed ')) return;
    self.mode = "view-list";
  }

  this.onload = function() {
    loadList();
    self.mode = "view-list";
    app.updateStepNavbar();
  }

  this.attachPRC = function() {
    var h = function(v) {
      self.prof.prc = v;
      self._controller.refresh();
    }
    var p = { onselect:h, idtype:'prc', idtitle:'Professional Regulation Commission', idcaption:'PRC No', show_validitydate: 'true' }
    var pop = new PopupOpener( "id_entry", p , {width:'500', title:'Professional Regulation Commission'} ); 
    return pop;
  }

  this.attachPTR = function() {
    var h = function(v) {
      self.prof.ptr = v;
      self._controller.refresh();
    }
    var p = { onselect: h, idtype:'ptr', idtitle:'Professional Tax Receipt', idcaption:'PTR No'}    
    return new PopupOpener( "id_entry", p,  {width:'500', title:'Professional Tax Receipt'} );
  }


});

\$register( {id:'id_entry',  page:"${PAGE.parentPath}/id_entry", context: 'id_entry' } );
</script>

<style>
  .caption-class { width: 200px;}
  .subcaption-class { width : 100px; }
</style>


<legend>List of Licensed Professionals</legend>

<div  r:context="professional" r:visibleWhen="#{mode == 'view-list'}">
  <table r:context="professional" r:items="professionalList" r:varName="item" r:name="selectedItem"  style="width:100%" class="customtable">
    <thead>
      <tr>
        <td class="lp-profession">Profession</td>        
        <td class="lp-prcno">PRC No</td>
        <td class="lp-name">Name</td>
        <td class="lp-address">Address</td>
        <td class="lp-action">Actions</td>        
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="lp-profession">#{item.profession}</td>        
        <td class="lp-prcno">#{item.prc.idno}</td>
        <td class="lp-name">#{item.entity.name}</td>
        <td class="lp-address">#{item.entity.address.text}</td>
        <td class="lp-action">
          <a href="#" r:context="professional" r:name="editItem" class="link-edit-action">Edit</a> 
          &nbsp;&nbsp;
          <a href="#" r:context="professional" r:name="removeItem" class="link-edit-action">Remove</a> 
        </td>
      </tr>
    </tbody>
  </table>
  <br>
  @wx:button( caption:'Add New Entry', context:'professional', name:'addNew')
  @wx:button( caption:'Next', context:'professional', name:'finish')
</div>


<div r:context="professional" r:visibleWhen="#{mode=='edit-entry'}" style="display:none">
  <p>Please fill in the necessary data below. Text marked with * are required fields. </p>
  <div class="form">
    @wx:combo(caption:'Primary Profession', context:'professional', name:'prof.profession', required: true, inputClass:'+w250', 
      attrs:[items:'professions', emptyText:'-', allowNull: true ])
    @wx:text(caption:'Last Name', context:'professional', name:'prof.entity.lastname', required: true, hint:'Last Name')
    @wx:text(caption:'First Name', context:'professional', name:'prof.entity.firstname', required: true, hint:'First Name' )
    @wx:text(caption:'Middle Name', context:'professional', name:'prof.entity.middlename', required: true, hint:'Middle Name')

    @wx:radiolist( caption:'Resident', context:'professional', name:'prof.entity.resident', required:true, items: [ [key:'1', value:'Resident'], [key:'0', value:'Non-resident' ] ] )
    @wx:address_local( caption: 'Address', context:'professional', name:'prof.entity.address', depends: 'prof.entity.resident', visibleWhen: '#{ prof.entity.resident == \'1\' }', required:true )
    @wx:address_nonlocal( caption: 'Address', context:'professional', name:'prof.entity.address', depends: 'prof.entity.resident', visibleWhen: '#{ prof.entity.resident == \'0\' }', required:true )

    @wx:email(context:'professional', name:'prof.entity.email')
    @wx:mobile(context:'professional', name:'prof.entity.mobileno' )

    <br>
    @wx:idproof( context:'professional', name:'prof.prc', action:'attachPRC', caption:'Professional Regulation Commission [PRC]' )
    <br>
    @wx:idproof( context:'professional', name:'prof.ptr', action:'attachPTR', caption: 'Professional Tax Receipt [PTR]' )

  </div>  
  @wx:button( caption:'Cancel', context:'professional', name:'cancelEdit', attrs:[immediate:true])
  @wx:button( caption:'Save and Add To List', context:'professional', name:'save')
</div>
