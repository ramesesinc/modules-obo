import com.rameses.annotations.*; 

class BuildingPermitSectionWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit_finding")
	def findingEm;

	@DataContext("vw_building_permit_section")
	def sectionEm;

	@DataContext("building_permit_fee")
	def feeEm;

	@DataContext("building_permit")
	def appEm;

	@DataContext("obo_section")
	def oboSectionEm;

	/**********************************************************************************************
	* REMEMBER: This is the building_permit_section process flow
	***********************************************************************************************/
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section' }") 
	public void beforeSendForVerification( def evt ) {
		def p = evt.args[0];
		def v = sectionEm.find( [objid: p.refid ]).first();
		if( v.typeid.toLowerCase() == 'zoning' ) {
			if(v.app.zoneclass?.objid == null ) {
				throw new Exception("Please specify zone classification");	
			}
		}
	} 

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section'  && args[0].action == 'send-for-obo-processing' }") 
	public void beforeSendToObo( def evt ) {
		def p = evt.args[0];

		def c = findingEm.select("c:{COUNT(*)}").find([parentid:p.refid]).where("supersederid IS NULL AND state = 2 AND NOT(transmittalid IS NULL)").val();
		if( c > 0 ) throw new Exception("There are open findings that need to be closed or re-issued first");

		//if there are issues then fees are not required
		c = findingEm.select("c:{COUNT(*)}").find([parentid:p.refid]).where("supersederid IS NULL AND state = 2 AND transmittalid IS NULL").val();
		if( c > 0 ) return;

		//check if fees are required before approval
		def s1 = sectionEm.find([objid: p.refid]).select("appid,typeid").first();
		def reqFee = oboSectionEm.find( [objid: s1.typeid ]  ).select("requirefee").val();
		if( reqFee == 1) {
			c = feeEm.find( [appid: s1.appid, sectionid: s1.typeid ] ).select("c:{COUNT(*)}").val();
			if( !c) throw new Exception("There must be at least one fee for this section");
		}
	} 

	//signal the parent 
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section' && args[0].action == 'send-for-obo-processing' }") 
	public void signalParent( def evt ) {
		def p = evt.args[0];
		def r = evt.result;
		def appid = sectionEm.find( [objid: p.refid] ).select("appid").val();
		def cnt = sectionEm.find([appid:appid]).select("c:{COUNT(*)}").where( " task.state IN ('evaluation', 'review', 'evaluation-approval' ) ").val();
		if(cnt <=0) {
			def app = appEm.find([objid:appid]).select("task.*").first();
			def f = [:];
			f.processname = 'building_permit';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = 'send-for-verification';
			f.taskid = app.taskid;
			wfSvc.signal(f);	
		}
	} 

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section'  && args[0].action == 'send-for-final-approval' }") 
	public void beforeApproval( def evt ) {
		def p = evt.args[0];
		def issId = sectionEm.find( [objid: p.refid ]).select("issuanceid").first()?.issuanceid;
		if(issId==null) throw new Exception("Please issue the permit or clearance");
	} 

	//release process. Ensure that all tasks are closed before firing main
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section' && args[0].action == 'approve' }" ) 
	public void doActionBeforeApprove( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def appid = sectionEm.find( [objid: p.refid] ).select("appid").val();
		def cnt = sectionEm.find([appid:appid]).select("c:{COUNT(*)}").where( " NOT(task.state = 'end' ) ").val();
		if( cnt == 0 ) {
			def app = appEm.find([objid:appid]).select("task.*").first();
			def f = [:];
			f.processname = 'building_permit';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = 'send-for-release';
			f.taskid = app.taskid;
			wfSvc.signal(f);
		}
	}

} 