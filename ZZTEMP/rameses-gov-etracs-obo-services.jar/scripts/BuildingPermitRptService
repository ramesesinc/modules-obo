import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

public class BuildingPermitRptService  {

	@DataContext("building_permit_rpu")
	def rpuEm;

	@DataContext("building_permit_entity")
	def entityEm;

	@DataContext("building_permit")
	def appEm;

	@Service(value="RPTCertificationOnlineService", connection="local-rpt-server")
	def rptSvc;

	@ProxyMethod
	public def issueTDDocs( def o ) {
		def app = appEm.find( [objid: o.appid ]).first();
		def list =  rpuEm.find( [appid: o.appid] ).list();
		
		list.each {
			def u = [:];
			def params = [:];
			params.entityid = entityEm.find( [objid: it.ownerid] ).first().profileid ;
			params.faas = [objid:  it.refid, tdno: it.tdno];
			params.refid = app.objid;
			params.refno = app.appno;
			params.refdate = app.dtfiled;
			params.reftype = "building_permit";
			params.purpose = "For Building Permit Application"

			if( !it.truecopycertid ) {
				def cert = rptSvc.issueTrueCopy(params);
				u.truecopycertid = cert.objid;
			}
			if( !it.taxclearanceid ) {
				params.faases = [params.faas];
				def cert = rptSvc.issueTaxClearance(params);
				u.taxclearanceid = cert.objid;
			}
			if(u) {
				rpuEm.find( [objid: it.objid ]).update( u );
			}
		}

	}

}