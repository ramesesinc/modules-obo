import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;

public class OnlineBuildingApplicationService  {

	@DataContext("online_building_application")
	def appEm;

	@DataContext("online_building_application_entity")
	def entityEm;

	@DataContext("online_building_application_ancillary")
	def ancillaryEm;

	@DataContext("online_building_application_location")
	def locationEm;

	@DataContext("online_building_application_info")
	def appInfoEm;

	@Service("DateService")
	def dateSvc;

	@Service(dynamic=true)
	def dynamicSvc;

	
	@ProxyMethod
	public def create(def o) {
		def kg = new KeyGen();
		o.objid = kg.generateAlphanumKey(o.orgcode+"-",8);
		o.dtfiled = dateSvc.getServerDate();
		def app = appEm.create( o );
		/*
		def emailSvc = dynamicSvc.lookup(o.orgcode+":EmailService");
		app.tokenid = "MYTOKEN " + new UID();
		emailSvc.send( app );
		*/
		updateNextStep( [appid: app.objid, nextstep: o.nextstep ] );
		return app;
	}

	def saveEntity(def o, def role ) {
		if(!o.objid) {
			def v = [role:role, appid: o.appid];
			v.putAll(o);
			return entityEm.create(v);
		}
		else {
			return entityEm.find( [objid: o.objid] ).update( o );
		}
	}

	@ProxyMethod
	public void updateNextStep( def o ) {
		if(!o.nextstep) return;
		appEm.find( [objid: o.appid] ).update([step: o.nextstep]);
	}

	@ProxyMethod
	public def findCurrentStep( def o ) {
		appEm.find( [objid: o.appid ] ).select("step").first();
	}

	@ProxyMethod
	public def saveLocation(def o) {
		def lotowner = o.remove("owner");
		lotowner.appid = o.appid;
		lotowner.entityid = lotowner.remove("objid");
		def entityOwner = saveEntity(lotowner, "lotowner");

		o.ownerid = entityOwner.objid;
		o.owner = [objid: o.ownerid ];
		def loc = locationEm.create( o );
		def  u = [locationid: loc.objid ];
		if( o.lotowned == "1" ) {
			u.ownerid = entityOwner.objid;
			u.step = "professional";
		}
		else {
			u.step = "owner";
		}
		appEm.find( [objid: o.appid ] ).update(u);		
		return u;
	}

	@ProxyMethod
	public def getLocation(def o ) {
		def app = appEm.select("locationid").find( [objid: o.appid ] ).first();
		if( !app?.locationid ) return null;
		return locationEm.find( [objid: app.locationid ] ).first();
	}

	@ProxyMethod
	public def getLocations(def o ) {
		def app = appEm.select("locationid").find( [objid: o.appid ] ).first();
		def locid = app.locationid;
		def list =  locationEm.find( [appid: o.appid ] ).list();
		list.each {
			it.primary =  (it.objid == locid ) ? true : false;
		}
		return list;
	}

	@ProxyMethod
	public def saveOwner(def o) {
		def owner = saveEntity(o, "owner");
		appEm.find([objid:o.appid]).update([ownerid: owner.objid]);
		updateNextStep( o );
	}

	@ProxyMethod 
	public def getOwner(def o) {
		def app = appEm.select("ownerid").find( [objid: o.appid ] ).first();
		if(!app.ownerid) return null;
		return entityEm.find( [objid: app.ownerid ] ).first();		
	}

	@ProxyMethod 
	public def saveProfessional(def o) {
		saveEntity(o, "professional");
		updateNextStep( o );
	}

	@ProxyMethod 
	public def getProfessional(def o) {
		return entityEm.find( [objid: o.objid]).first();
	}

	@ProxyMethod
	public void removeProfessional( def o) {
		entityEm.find( [objid: o.objid]).delete();
	}

	@ProxyMethod
	public def getProfessionalList( def o ) {
		return entityEm.select("objid,lastname,firstname,middlename,profession,gender,address.*").find([appid: o.appid, role:'professional']).list();
	}

	@ProxyMethod
	public def updateProjectInfo( def o  ) {
		appEm.find( [objid: o.appid] ).update( o );
		updateNextStep( o );
	}

	@ProxyMethod
	public def getProjectInfo( def o  ) {
		def flds = "description,title,occupancytypeid,numunits,floorarea,estimatedcost,dtproposedconstruction,dtexpectedcompletion,supervisorid,totalfloorarea,bldgtypeid,height,numfloors,worktypes";		
		return appEm.select(flds).find( [objid: o.appid] ).first();
	}

	

	@ProxyMethod
	public def saveAncillaryPermits( def o ) {
		o.permits.each { k,v->
			def z = ancillaryEm.find( [appid:o.appid, permittypeid:k ] ).select("objid").val();
			if( !z && v.toInteger() == 1 ) {
				def m = [appid: o.appid, permittypeid: k, state: 'PENDING' ];
				m.type = [objid: k];
				ancillaryEm.create( m );	
			} 
			else if( z && v.toInteger() == 0 ) {
				ancillaryEm.find( [appid: o.appid, permittypeid: k] ).delete()	
			}
		}		
		return null;
	}

	@ProxyMethod
	public def getAncillaryPermits( def o ) {
		return ancillaryEm.find( [appid: o.appid] ).orderBy("type.sortorder").list();	
	}

	@ProxyMethod
	public def getAncillaryPermit( def o ) {
		if(!o.objid) throw new Exception("getAncillary error. objid is required");
		
		def m = ancillaryEm.find( [objid: o.objid] ).first();
		m.infos = getAppInfos( [parentid: o.objid ] );
		//m.requirements = getRequirements( o );
		return m;	
	}

	@ProxyMethod
	public void saveAncillaryPermit( def o ) {
		if(!o.objid) throw new Exception("updateAncillary error. objid is required");
		if(!o.infos) throw new Exception("updateAncillary error. infos is required");
		o.designprofessionalid = o.designprofessional?.objid;
		o.supervisorid = o.supervisor?.objid;
		ancillaryEm.find( [objid: o.objid ] ).update( o );
		saveAppInfos( [parentid: o.objid, infos: o.infos ] );
	}

	@ProxyMethod
	public def saveAccessories( def o ) {
		if(!o.objid) throw new Exception("updateAccessories error. objid is required");
		if(!o.infos) throw new Exception("updateAccessories error. infos is required");
		saveAppInfos( [parentid: o.objid, infos: o.infos ] );
	}

	@ProxyMethod
	public def getAccessories( def o ) {
		if(!o.objid) throw new Exception("updateAccessories error. objid is required");
		return getAppInfos( [parentid: o.objid ] );
	}


	//UTILITY METHODS FOR APP INFOS
	private void saveAppInfos( o ) {
		if(!o.parentid) throw new Exception("saveAppInfos error. parentid is required");
		if(!o.infos) throw new Exception("saveAppInfos error. infos is required");

		//clear first existing infos.
		appInfoEm.find([parentid: o.parentid]).delete();
		o.infos.each { info->
			def m = [parentid: o.parentid, name: info.name];
			m.type = [objid: info.name];
			if( info.datatype == 'decimal') m.decimalvalue = info.value;
			else if( info.datatype == 'integer') m.integervalue = info.value;
			else if( info.datatype == 'boolean') m.booleanvalue = true;
			else if( info.datatype == 'date') m.datevalue = info.value;
			else m.stringvalue = info.value;
			appInfoEm.create( m );
		}
	}

	private def getAppInfos( o ) {
		def list = [];
		def tmpList = appInfoEm.find( [parentid: o.parentid] ).list();
		tmpList.each { info->
			def m = [name:info.name, datatype:info.type.datatype];
			if( m.datatype == 'decimal') m.value = info.decimalvalue;
			else if( m.datatype == 'integer') m.value = info.integervalue;
			else if( m.datatype == 'boolean') m.value = true;
			else if( m.datatype == 'date') m.value = info.datevalue;
			else m.value = info.stringvalue;
			list << m;
		}
		return list;
	}



}