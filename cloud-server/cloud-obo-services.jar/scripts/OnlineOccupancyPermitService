import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;

public class OnlineOccupancyPermitService  {

	@DataContext("online_occupancy_permit")
	def appEm;

	@DataContext("online_occupancy_permit_rpu")
	def rpuEm;

	@DataContext("online_occupancy_permit_entity")
	def entityEm;

	@DataContext("online_occupancy_permit_professional")
	def professionalEm;

	@DataContext("online_occupancy_permit_costitem")
	def permitCostItemEm;

	@DataContext("obo_costitem")
	def costItemEm;

	@Service("DateService")
	def dateSvc;

	@Service(dynamic=true)
	def dynamicSvc;


	@ProxyMethod
	public def moveNextStep( def o ) {
		if(!o.appid) throw new Exception("appid is required in determining the next step");
		def app = appEm.find( [objid: o.appid] ).first();
		def step = app.step;

		//check if step is professional but does not have any entry
		if( step == 3 ) {
			boolean hasItems = professionalEm.find( [appid: o.appid ] ).exists();
			if( !hasItems ) throw new Exception("Please add at least one professional");
		}

		def nextStep = step + 1;
		if( nextStep == 2 ) {
			if(app.applicantid) nextStep = 3; 
		}
		//compare next step if less than existing then you can update otherwise stay the same
		if(app.step < nextStep ) {
			appEm.find( [objid: o.appid] ).update([step: nextStep]);			
		}
		else {
			nextStep = app.step;
		}
		return [step:nextStep];
	}

	@ProxyMethod
	public def create(def o) {
		def kg = new KeyGen();
		o.objid = "OP"+ kg.generateAlphanumKey(o.orgcode+"-",8);
		o.dtfiled = dateSvc.getServerDate();
		o.step = 1;
		def locationid = o.remove("locationid");
		def applicantid = o.remove("applicantid");

		def app = appEm.create( o );
		o.rpus.each {
			it.appid = app.objid;
			rpuEm.create( it ); 
		}
		o.entities.each {
			it.appid = app.objid;
			entityEm.create( it );
		}
		o.professionals.each {
			it.appid = app.objid;
			professionalEm.create(it);
		}

		//include also all cost items so it is already prepared
		costItemEm.where("1=1").list().each {
			def z = [appid: app.objid];
			z.item = [objid: it.objid];
			z.amount = 0;
			permitCostItemEm.create(z);
		}

		appEm.find([objid: app.objid]).update([applicantid: applicantid, locationid: locationid ] );

		/*
		def emailSvc = dynamicSvc.lookup(o.orgcode+":EmailService");
		app.tokenid = "MYTOKEN " + new UID();
		emailSvc.send( app );
		*/
		return app;
	}

	@ProxyMethod
	public def findCurrentInfo( def o ) {
		appEm.find( [objid: o.appid ] ).select("orgcode,step").first();
	}

	@ProxyMethod
	public def getApplication(def o ) {
		def app = appEm.find([objid: o.appid ] ).first();
		if(o.loadall == true ) {
			app.rpus = rpuEm.find( [appid: o.appid] ).list();	
		}

		if(o.include_costitems == true ) {
			app.costitems = permitCostItemEm.find( [appid: app.objid ] ).list();
			app.amount = app.costitems.sum{ it.amount };
		}
		return app;
	}

	@ProxyMethod
	public def updateCostItems( def o ) {
		o.costitems.each {
			permitCostItemEm.find( [objid: it.objid] ).update( [amount: it.amount ] );
		}
		def res= [:];
		res.items = permitCostItemEm.find( [appid: o.appid ] ).list();
		res.amount = res.items.sum{it.amount};
		return res;
	}

	//This is called by the local client
	@ProxyMethod
	public def getOnlineSubmission(def parm) {
		def appid = parm.appid;
		def app = appEm.find([objid: appid ] ).first();
		//remove the object links so it will not add to the load
		app.remove( "applicant");
		app.remove( "location");
		app.remove( "occupancytype");

		//add the entities, locations, professionals
		app.entities = entityEm.find( [appid: appid ]).list();


		app.rpus = locationEm.find( [appid: appid] ).list();
		app.rpus.each{ it.remove("owner") };
		app.professionals = professionalEm.find( [appid:appid] ).list();
		app.professionals.each{ it.remove("entity") }
		

		app.ancillaries = ancillaryEm.find([appid: appid]).list();
		app.ancillaries.each{ it.remove("type"); it.remove("designprofessional"); it.remove("supervisor"); }
		

		app.infos = appInfoEm.find( [appid: appid ] ).list();
		app.infos.each { it.remove("type") };
		app.requirements = reqEm.find( [appid: appid ]).list();

		app.trackingno = app.remove("objid");
		return app;
	}


}