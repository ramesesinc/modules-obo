import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;

public class OnlineBuildingPermitService  {

	@DataContext("online_building_permit")
	def appEm;

	@DataContext("online_building_permit_entity")
	def entityEm;

	@DataContext("online_building_permit_ancillary")
	def ancillaryEm;

	@DataContext("online_building_permit_rpu")
	def locationEm;

	@DataContext("online_building_permit_info")
	def appInfoEm;

	@DataContext("online_building_permit_professional")
	def professionalEm;

	@DataContext("online_building_permit_requirement")
	def reqEm;

	@DataContext("obo_requirement_type")
	def reqTypeEm;

	@Service("DateService")
	def dateSvc;

	@Service(dynamic=true)
	def dynamicSvc;


	@ProxyMethod
	public def moveNextStep( def o ) {
		if(!o.appid) throw new Exception("appid is required in determining the next step");
		def app = appEm.find( [objid: o.appid] ).first();
		def step = app.step;

		//check if step is professional but does not have any entry
		if( step == 3 ) {
			boolean hasItems = professionalEm.find( [appid: o.appid ] ).exists();
			if( !hasItems ) throw new Exception("Please add at least one professional");
		}

		def nextStep = step + 1;
		if( nextStep == 2 ) {
			if(app.applicantid) nextStep = 3; 
		}
		//compare next step if less than existing then you can update otherwise stay the same
		if(app.step < nextStep ) {
			appEm.find( [objid: o.appid] ).update([step: nextStep]);			
		}
		else {
			nextStep = app.step;
		}
		return [step:nextStep];
	}

	@ProxyMethod
	public def create(def o) {
		def kg = new KeyGen();
		o.objid = kg.generateAlphanumKey(o.orgcode+"-",8);
		o.dtfiled = dateSvc.getServerDate();
		o.step = 1;
		def app = appEm.create( o );
		/*
		def emailSvc = dynamicSvc.lookup(o.orgcode+":EmailService");
		app.tokenid = "MYTOKEN " + new UID();
		emailSvc.send( app );
		*/
		return app;
	}

	def formatAddress( def addr ) {
		def lst = [];
		lst << [addr.unitno, addr.bldgno, addr.bldgname ].findAll{it!=null}.join(" ");
		lst << [addr.street, addr.subdivision ].findAll{it!=null}.join(",");
		lst << [addr.barangay?.name, addr.citymunicipality, addr.province ].findAll{it!=null}.join(",");
		return lst.findAll{it}.join(",");		
	}

	def formatPersonalName( def v ) {
		return v.lastname + ", " + v.firstname + " " + ((v.middlename!=null)?v.middlename.substring(0,1)+'.': '');
	}

	//reusable method of saving entity
	def saveEntity(def o) {
		if(!o.objid) {
			def v = [appid: o.appid];
			v.putAll(o);
			v.name = formatPersonalName(o);
			v.address.text = formatAddress(o.address);
			return entityEm.create(v);
		}
		else {
			o.name = formatPersonalName(o);
			o.address.text = formatAddress(o.address);
			return entityEm.find( [objid: o.objid] ).update( o );
		}
	}


	@ProxyMethod
	public def findCurrentInfo( def o ) {
		appEm.find( [objid: o.appid ] ).select("orgcode,step").first();
	}

	//STEP 1.
	@ProxyMethod
	public def saveLocation(def o) {
		def lotowner = o.remove("owner");
		lotowner.appid = o.appid;
		lotowner.entityid = lotowner.remove("objid");
		def entityOwner = saveEntity(lotowner);
		o.ownerid = entityOwner.objid;
		o.owner = [objid: o.ownerid ];
		def loc = locationEm.create( o );
		def  u = [locationid: loc.objid ];
		if( o.lotowned == "1" ) {
			u.applicantid = entityOwner.objid;
		}
		appEm.find( [objid: o.appid ] ).update(u);
		return u;
	}

	@ProxyMethod
	public def getLocation(def o ) {
		def app = appEm.select("locationid").find( [objid: o.appid ] ).first();
		if( !app?.locationid ) return null;
		return locationEm.find( [objid: app.locationid ] ).first();
	}

	@ProxyMethod
	public def getLocations(def o ) {
		def app = appEm.select("locationid").find( [objid: o.appid ] ).first();
		def locid = app.locationid;
		def list =  locationEm.find( [appid: o.appid ] ).list();
		list.each {
			it.primary =  (it.objid == locid ) ? true : false;
		}
		return list;
	}

	//STEP 2
	@ProxyMethod
	public def saveApplicant(def o) {
		def applicant = saveEntity(o);
		appEm.find([objid:o.appid]).update([applicantid: applicant.objid]);
	}

	@ProxyMethod 
	public def getApplicant(def o) {
		def app = appEm.select("applicantid").find( [objid: o.appid ] ).first();
		if(!app.applicantid) return null;
		return entityEm.find( [objid: app.applicantid ] ).first();		
	}

	@ProxyMethod 
	public def saveProfessional(def o) {
		o.entity.appid = o.appid;
		o.entity = saveEntity(o.entity);
		o.entityid = o.entity.objid; 
		if(o.objid) {
			return professionalEm.find( [objid: o.objid]).update( o );
		}
		else {
			return professionalEm.create( o );
		}
	}

	@ProxyMethod 
	public def getProfessional(def o) {
		return professionalEm.find( [objid: o.objid]).first();
	}

	@ProxyMethod
	public void removeProfessional( def o) {
		professionalEm.find( [objid: o.objid]).delete();

		//check first the main app if entity is neither a lot owner or applicant before deleting
		def entityid = o.entity.objid;
		boolean b = appEm.find( [applicantid: entityid] ).exists();
		if(b) return;
		b = locationEm.find( [ownerid: entityid] ).exists();
		if(b) return;
		entityEm.find( [objid: entityid ]).delete();
	}

	@ProxyMethod
	public def getProfessionalList( def o ) {
		return professionalEm.select("objid,entity.objid,entity.name,entity.address.text,profession,prc.*").find([appid: o.appid]).list();
	}

	@ProxyMethod
	public def updateProjectInfo( def o  ) {
		o.occupancytypeid = o.occupancytype?.objid;
		appEm.find( [objid: o.appid] ).update( o );
	}

	@ProxyMethod
	public def getProjectInfo( def o  ) {
		def flds = "description,title,occupancytype.*,numunits,floorarea,estimatedcost,dtproposedconstruction,dtexpectedcompletion,supervisorid,totalfloorarea,bldgtypeid,height,numfloors,worktypes";		
		return appEm.select(flds).find( [objid: o.appid] ).first();
	}

	@ProxyMethod
	public def saveAncillaryPermits( def o ) {
		o.permits.each { k,v->
			def z = ancillaryEm.find( [appid:o.appid, permittypeid:k ] ).select("objid").val();
			if( !z && v.toInteger() == 1 ) {
				def m = [appid: o.appid, permittypeid: k, state: 'PENDING' ];
				m.type = [objid: k];
				m = ancillaryEm.create( m );	
				buildRequirements( m );
			} 
			else if( z && v.toInteger() == 0 ) {
				def x = ancillaryEm.find( [appid: o.appid, permittypeid: k] ).first();
				reqEm.find([parentid : x.objid]).delete();
				ancillaryEm.find( [objid:x.objid] ).delete()	
			}
		}		
		return null;
	}

	@ProxyMethod
	public def getAncillaryPermits( def o ) {
		return ancillaryEm.find( [appid: o.appid] ).orderBy("type.sortorder").list();	
	}

	@ProxyMethod
	public def getAncillaryPermit( def o ) {
		if(!o.objid) throw new Exception("getAncillary error. objid is required");
		
		def m = ancillaryEm.find( [objid: o.objid] ).first();
		m.infos = getAppInfos( [parentid: o.objid ] );
		m.requirements = getRequirements( [parentid: o.objid] );
		return m;	
	}

	@ProxyMethod
	public void saveAncillaryPermit( def o ) {
		if(!o.objid) throw new Exception("updateAncillary error. objid is required");
		//if(!o.infos) throw new Exception("updateAncillary error. infos is required");
		o.designprofessionalid = o.designprofessional?.objid;
		o.supervisorid = o.supervisor?.objid;

		ancillaryEm.find( [objid: o.objid ] ).update( o );
		saveAppInfos( [parentid: o.objid, infos: o.infos, appid: o.appid ] );
	}

	@ProxyMethod
	public def saveAccessories( def o ) {
		if(!o.objid) throw new Exception("updateAccessories error. objid is required");
		if(!o.infos) return;
		saveAppInfos( [parentid: o.objid, infos: o.infos, appid: o.appid ] );
	}

	@ProxyMethod
	public def getAccessories( def o ) {
		if(!o.objid) throw new Exception("updateAccessories error. objid is required");
		return getAppInfos( [parentid: o.objid ] );
	}


	//UTILITY METHODS FOR APP INFOS
	private void saveAppInfos( o ) {
		if(!o.parentid) throw new Exception("saveAppInfos error. parentid is required");
		//if(!o.infos) throw new Exception("saveAppInfos error. infos is required");

		//clear first existing infos.
		appInfoEm.find([parentid: o.parentid]).delete();
		o.infos.each { info->
			def m = [parentid: o.parentid, name: info.name, appid: o.appid];
			m.type = [objid: info.name];
			if( info.datatype == 'decimal') m.decimalvalue = info.value;
			else if( info.datatype == 'integer') m.intvalue = info.value;
			else if( info.datatype == 'boolean') m.booleanvalue = true;
			else if( info.datatype == 'date') m.datevalue = info.value;
			else m.stringvalue = info.value;
			appInfoEm.create( m );
		}
	}

	private def getAppInfos( o ) {
		def list = [];
		def tmpList = appInfoEm.find( [parentid: o.parentid] ).list();
		tmpList.each { info->
			def m = [name:info.name, datatype:info.type.datatype];
			if( m.datatype == 'decimal') m.value = info.decimalvalue;
			else if( m.datatype == 'integer') m.value = info.intvalue;
			else if( m.datatype == 'boolean') m.value = true;
			else if( m.datatype == 'date') m.value = info.datevalue;
			else m.value = info.stringvalue;
			list << m;
		}
		return list;
	}

	@ProxyMethod
	public def buildRequirements(def o) {
		def rlist  = reqTypeEm.find( [permittype: o.permittypeid]).list();
		if(!rlist) {
			rlist = reqTypeEm.where("permittype IS NULL").list();
		}
		rlist.each {
			def m = [appid: o.appid, parentid:o.objid, typeid: it.objid];
			reqEm.create( m );
		}
	}

	@ProxyMethod
	public def getRequirements(def o) {
		return reqEm.find( o ).list(); 
	}

	@ProxyMethod
	public def getApplication(def o ) {
		def app = appEm.find([objid: o.appid ] ).first();
		if(o.loadall == true ) {
			app.rpus = locationEm.find( [appid: o.appid] ).list();	
			app.ancillaries = ancillaryEm.find([appid: o.appid]).list();
		}
		return app;
	}

	//This is called by the local client
	@ProxyMethod
	public def getOnlineSubmission(def parm) {
		def appid = parm.appid;
		def app = appEm.find([objid: appid ] ).first();
		//remove the object links so it will not add to the load
		app.remove( "applicant");
		app.remove( "location");
		app.remove( "occupancytype");

		//add the entities, locations, professionals
		app.entities = entityEm.find( [appid: appid ]).list();


		app.rpus = locationEm.find( [appid: appid] ).list();
		app.rpus.each{ it.remove("owner") };
		app.professionals = professionalEm.find( [appid:appid] ).list();
		app.professionals.each{ it.remove("entity") }
		

		app.ancillaries = ancillaryEm.find([appid: appid]).list();
		app.ancillaries.each{ it.remove("type"); it.remove("designprofessional"); it.remove("supervisor"); }
		

		app.infos = appInfoEm.find( [appid: appid ] ).list();
		app.infos.each { it.remove("type") };
		app.requirements = reqEm.find( [appid: appid ]).list();

		app.trackingno = app.remove("objid");
		return app;
	}


}