import com.rameses.annotations.*;
import java.rmi.server.*;

/* ******************************************************************************************************
Notes:
* zoning clearance
******************************************************************************************************* */
class ZoningBuildingApplicationWorkflowInterceptor { 

	@DataContext("locational_clearance")
	def clearanceEm;

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_application' && args[0].action == 'post-payment' }", index=100 ) 
	public void createZoningClearanceAfterPayment( def evt ) {
		def p = evt.args[0];
		def appid = p.refid;
		def f = clearanceEm.find( [appid: appid] ).first();
		if(!f) {
			f = [:];
			f.appid = appid;
			f.controlno = "TMP" + new UID();
			f.state = 0;
			clearanceEm.create( f );
		}
	}

	//release process. Make sure locational clearance is issued
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_application' && args[0].action == 'release' }", index=100 ) 
	public void checkLocClearanceBeforeRelease( def evt ) {
		def p = evt.args[0];
		def appid = p.refid;

		def f = clearanceEm.find( [appid: appid] ).first();
		if(!f) throw new Exception("Zoning clearance not found");

		if(f.state == 0) throw new Exception("The zoning clearance is not yet issued. Please issue the zoning clearance first");

		throw new Exception("stop check locational " + f.state );	

	}

} 