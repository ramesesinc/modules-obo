import com.rameses.annotations.*;
import java.rmi.server.*;

class BuildingPermitCaptureService {
	
	@DataContext("building_permit")
	def permitEm;

	@DataContext("building_info")
	def infoEm;

	@DataContext("building_application_entity")
	def entityEm;

	@DataContext("obo_doctype")
	def doctypeEm;

	@Service("DateService")
	def dateSvc;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Env
	def env;

	@ProxyMethod
	public def save( def app ) {
		//check first all professionals if exist in the obo_professional table
		app.objid = "BAPP" + new UID();
		app.occupancytypeid = app.occupancytype?.objid;

		//remove application before so it can be replaced
		def applicant = app.remove("applicant");
		def binfo = infoEm.create( app );

		//save applicant
		applicant.profileid = applicant.remove("objid");
		applicant.entitytype = applicant.type?.toLowerCase();
		applicant.resident = ( applicant.address?.type == "local" ) ? 1 : 0;
		applicant = entityEm.create( applicant );

		//calculate the cost first before receiving
		def dt = dateSvc.getServerDate();
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = app.occupancytype;
		def cost = costSvc.calc( param );

		//update applicant, cost and appid for info
		def u = [:];
		u.createdby = [objid: env.USERID, name: env.FULLNAME];
		u.dtcreated = dt;
		u.applicantid = applicant.objid;
		u.fixedcost = cost; 
		infoEm.find( [objid: binfo.objid ] ).update( u );

		def doctype = doctypeEm.find( [objid: "BUILDING_PERMIT" ]).first();

		u = [:];
		u.state = 2;
		u.issuedby = [ objid: env.USERID, name: env.FULLNAME ];
		u.dtissued = dateSvc.getServerDate();
		u.controlno = app.appno;
		u.template = doctype.template;
		u.approverid = doctype.approverid;
		u.endorserid = doctype.endorserid;
		u.reportheader = doctype.reportheader;
		u.infoid = binfo.objid;

		permitEm.create( u );

		throw new Exception("stop building permit");

	}




	
}