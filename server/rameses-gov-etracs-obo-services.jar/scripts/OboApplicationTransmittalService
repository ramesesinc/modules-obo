import com.rameses.annotations.*; 
import java.rmi.server.*;

/***********************************************************************************************************
* This service is used for both  building and occupancy
* building - building_application_transmittal, building_application_requirement, building_evaluation_finding
* occupancy - occupancy_application_transmittal, occupancy_application_requirement, occupancy_evaluation_finding      
************************************************************************************************************/
class OboApplicationTransmittalService {

	@Service("DateService")
	def dateSvc;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@DataContext(dynamic=true)
	def db;

	@Service("Var")
	def sysvar;

	@Env
	def env;

	@ProxyMethod
	public void validateForRevision( def o ) {
		if(!o.appid) throw new Exception("appid is required in OboApplicationTransmittal.validateForRevision");
		if(!o.type) throw new Exception("Please include type in OboApplicationTransmittal.validateForRevision")
		if(!o.apptype) throw new Exception("Please include apptype in OboApplicationTransmittal.validateForRevision")

		def itemEm;

		if( o.apptype == "building_application" ) {
			if( o.type == "requirement") {
				itemEm = db.lookup( "building_application_requirement" ); 
			}
			else {
				itemEm = db.lookup("building_evaluation_finding");
			}
		}
		else {
			if( o.type == "requirement") {
				itemEm = db.lookup( "occupancy_application_requirement" ); 
			}
			else {
				itemEm = db.lookup("occupancy_inspection_finding");
			}
		};

		if( o.type  == "requirement" ) {
			//validate first if there are existing open items that need to be transmitted
			def c = itemEm.select("c:{COUNT(*)}").find([appid:o.appid]).where("state = 0").val();
			if( c>0) throw new Exception("All requirements must be checked first");			

			c = itemEm.select("c:{COUNT(*)}").find([appid:o.appid]).where("supersederid IS NULL AND state = 2 AND transmittalid IS NULL").val();
			if( c<=0) throw new Exception("There must be at least one requirement that needs to be revised");			
		}
		else {
			def c = itemEm.select("c:{COUNT(*)}").find([appid:o.appid]).where("supersederid IS NULL AND state=2 AND transmittalid IS NULL").val();
			if( c<=0) throw new Exception("There must be at least one finding that needs to be transmitted");			
		}
	}

	@ProxyMethod
	public def create( def o ) {
		if(!o.apptype) throw new Exception("please specify apptype in  OboApplicationTransmittal.create");
		if(!o.type) throw new Exception("please specify type in  OboApplicationTransmittal.create");
		if(!o.taskid) throw new Exception("taskid is required in OboApplicationTransmittal.create");
		if(!o.appid) throw new Exception("appid is required in OboApplicationTransmittal.create");

		def transmittalEm, itemEm, varname;

		if( o.apptype == "building_application" ) {
			transmittalEm = db.lookup( "building_application_transmittal");
			if( o.type == "requirement") {
				itemEm = db.lookup( "building_application_requirement" ); 
				varname = "building_requirement_transmittal" 
			}
			else {
				itemEm = db.lookup("building_evaluation_finding");
				varname =  "building_finding_transmittal";
			}
		}
		else {
			transmittalEm = db.lookup( "occupancy_application_transmittal");
			if( o.type == "requirement") {
				itemEm = db.lookup( "occupancy_application_requirement" ); 
				varname = "occupancy_application_requirement_transmittal" 
			}
			else {
				itemEm = db.lookup("occupancy_inspection_finding");
				varname =  "occupancy_inspection_finding_transmittal";
			}
		};
		def pattern = sysvar.get(  varname );
		if(!pattern) throw new Exception("Please define " + varname + " entry in sys_var. Ex. BP-RT-[yyyyMM]-[%05d]");
		def t = [:];
		t.objid = controlNoSvc.getNextNo( pattern );
		t.appid = o.appid;
		t.type = o.type;
		t.createdby = [objid: env.USERID, name: env.FULLNAME ];
		t.dtcreated = dateSvc.getServerDate();
		t.taskid = o.taskid;
		t.state = 0;
		transmittalEm.create( t );
		itemEm.find([appid: o.appid]).where("supersederid IS NULL AND state=2 AND transmittalid IS NULL").update( [transmittalid: t.objid] );
		return t;	
	}
	



}	