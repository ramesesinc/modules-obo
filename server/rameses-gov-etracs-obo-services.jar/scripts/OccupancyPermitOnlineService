import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

public class OccupancyPermitOnlineService  {
	
	@DataContext("occupancy_permit")
	def appEm;

	@DataContext("occupancy_permit_entity")
	def entityEm;

	@DataContext("occupancy_permit_professional")
	def professionalEm;

	@DataContext("occupancy_permit_requirement")
	def reqEm;

	@DataContext("obo_requirement_type")
	def reqTypeEm;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service(value="obo/OnlineOccupancyPermitDownloadService", connection="cloud-server")
    def cloudBldgSvc;

    @Service( "BuildingPermitService" )
    def bldgPermitSvc;

    @Env
    def env;

    @ProxyMethod
    public def getApplication( def o  ) {
    	//check first if the application already exists
    	def app = appEm.find([trackingno: o.appid ]).first();
    	if(app) throw new Exception("Application already exists. It is currently at " + app.task );

    	def dt = dateSvc.getServerDate();
    	/*******************************************************
    	//just dummy test - remove after
    	********************************************************/
    	def bldg_permit = bldgPermitSvc.findByPermitNo( [permitno: o.appid ] );
    	app = [trackingno: '137-OCC123', dtfiled: dt ];
    	app.bldgpermit = bldg_permit;
    	app.bldgpermitid = bldg_permit.objid;
    	app.orgcode = bldg_permit.orgcode;    	
    	app.apptype = "FULL";
		app.totalmaterialcost = 120;
		app.totaldirectlaborcost = 120;
		app.totalequipmentcost = 120;
		app.totalothercost = 120;
		app.contact_name = bldg_permit.contact.name;
		app.contact_detail = bldg_permit.contact.detail;
		app.contact_email = bldg_permit.contact.email;
		app.contact_mobileno = bldg_permit.contact.mobileno;
		app.occupancytypeid = bldg_permit.occupancytypeid;
		app.numunits = bldg_permit.numunits;
		app.totalfloorarea = bldg_permit.totalfloorarea;
		app.height = bldg_permit.height;
		app.numfloors = bldg_permit.numfloors;
		app.dtactualstarted = '2019-01-01';
		app.dtactualcompleted = '2020-01-01';
		app.profarchitectid = bldg_permit.profarchitectid;
		app.profcivilid = bldg_permit.profcivilid;
		app.profelectricalid = bldg_permit.profelectricalid;
		app.profmechanicalid = bldg_permit.profmechanicalid;
		app.profsanitaryid = bldg_permit.profsanitaryid;
		app.profplumbingid = bldg_permit.profplumbingid;
		app.profelectronicid = bldg_permit.profelectronicid;
		app.supervisorid = bldg_permit.supervisorid;
		app.contractorid = bldg_permit.contractorid;
		return app;
		//return cloudBldgSvc.getDownloadInfo( [appid: o.appid, orgcode: env.ORGID ] );
    }

	@ProxyMethod
	public def upload( def app ) {
		def u = [:];
		u.profarchitectid = app.remove("profarchitectid");
		u.profcivilid = app.remove("profcivilid");
		u.profelectricalid = app.remove("profelectricalid");
		u.profmechanicalid = app.remove("profmechanicalid");
		u.profsanitaryid = app.remove("profsanitaryid");
		u.profplumbingid = app.remove("profplumbingid");
		u.profelectronicid = app.remove("profelectronicid");
		u.profinteriorid = app.remove("profinteriorid");
		u.electricalworkid = app.remove("electricalworkid");
		u.mechanicalworkid = app.remove("mechanicalworkid");
		u.sanitaryworkid = app.remove("sanitaryworkid");
		u.plumbingwork = app.remove("plumbingworkid");
		u.electronicworkid = app.remove("electronicworkid");
		u.interiorwork = app.remove("interiorworkid");
		u.supervisorid = app.remove("supervisorid");
		u.contractorid = app.remove("contractorid");

		def newapp = appEm.create( app );
		app.entities.each {
			it.appid = newapp.objid;
			entityEm.create( it );
		}
		app.professionals.each {
			it.appid = newapp.objid;
			it.entity = [objid: it.entityid ];
			professionalEm.create( it );
		}

		appEm.find( [objid: newapp.objid ] ).update( u );
		
		app = newapp;
		def dt = dateSvc.getServerDate();
		//update the requirements
		def reqTypes = reqTypeEm.where("permittype = 'occupancy_permit' ").list();
		reqTypes.each {
			def r = [:];
			r.appid = app.objid;
			r.state = 0;
			r.typeid = it.objid;
			r.type = [objid: it.objid];
			reqEm.create( r );
		}

		//fire the workflow to start the process
		def p = [:];
		p.processname = 'occupancy_permit';
		p.refid = app.objid;
		p.startdate = dt;
		p.info = app;
		wfSvc.start(p);	

		return newapp;
	}


}