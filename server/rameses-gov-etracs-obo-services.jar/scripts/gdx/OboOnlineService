import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.common.*
import com.rameses.services.extended.*

class OboOnlineService  {

    @Service(value="TDOnlineService", connection="local-etracs-server")
    def svc;

    @Service(value="EntityService", connection="local-entity-server")
    def entitySvc;

    @Service(value="BuildingPermitService", connection="local-obo-server")
    def bldgPermitSvc;

    @Service(value="BuildingApplicationService", connection="local-obo-server")
    def appSvc;

    @ProxyMethod
    public def findLocation( def params ) {
        println "FINDING LOCATION"
        def info = svc.verifyTaxDec(params);
        info.each { k,v->
            println k+"="+v;
        }

        if(info.state != "CURRENT" ) {
            throw new Exception("The tax declaration must be in current state. Please verify with the assessors office");
        }    

        info.refid = info.objid;
        if(!info.taxpayer?.objid ) 
        	throw new Exception("Error in OboOnlineService. There is no taxpayer.objid returned in TDOnlineService");
        def txp = info.remove("taxpayer");   

        info.lotno = info.remove("cadastrallotno");
        
        def entity = entitySvc.open( [objid: txp.objid ] );
        info.owner.putAll( 
            [
                profileid: entity.objid,
                profileno: entity.entityno,
                birthdate: entity.birthdate,
                email: entity.email,
                mobileno: entity.mobileno,
                gender: entity.gender,
                name: entity.name,
                entitytype: entity.type,
                lastname: entity.lastname,
                firstname: entity.firstname,
                middlename: entity.middlename,
                tin: entity.tin,
                address: entity.address
            ]
        );
        info.owner.resident =  (entity.address.type == "nonlocal") ? 0 : 1;
        return info;
    }

    @ProxyMethod
    public def findBldgPermitNo( def params ) {
        def res = bldgPermitSvc.findByPermitNo( [permitno: params.permitno ] );
        if(res==null)
            throw new Exception("Permit no " + params.permitno + " not found");
        return res;
    }

    @ProxyMethod
    public def verifyApplication( def params ) {
        def app = appSvc.verifyApp(params);
        Random rand = new Random();
        def otp = rand.nextInt(100000000);
        app.key = String.format("%06d", otp).substring(0,6);
        return app;
    }

    @ProxyMethod
    public def findApplicationStatus( def params ) {
        return appSvc.findAppStatus(params);
    }

}
