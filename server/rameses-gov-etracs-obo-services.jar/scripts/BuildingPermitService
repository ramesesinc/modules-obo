import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

public class BuildingPermitService  {
	
	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit_rpu")
	def permitRpu;

	@DataContext("building_permit_entity")
	def permitEntity;

	@DataContext("building_permit_professional")
	def professionalEm;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit")
	def appEm;

	@Service("OboConstructionCostService")
	def costSvc;

	@Env
	def env;

	@ProxyMethod
	public def findByPermitNo( def p ) {
		def perm = vwAppEm.where( "issuance.controlno = :permitno", [permitno: p.permitno ] ).first();
		if(!perm)
			throw new Exception("Permit "+p.permitno + " does not exist");

		perm.rpus = permitRpu.find( [appid: perm.objid ] ).list();
		perm.entities = permitEntity.find( [appid: perm.objid ] ).list();
		perm.professionals = professionalEm.find( [appid: perm.objid ]).list();
		return perm;
	}	


	@ProxyMethod
	public def saveCapture( def app ) {
		def dt = dateSvc.getServerDate();
		//calculate the cost first before receiving
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = [
			group: app.occupancytype.group.objid,
			division: app.occupancytype.division.objid,
			type: app.occupancytype.objid
		] 
		app.worktypes = [ app.worktype.objid ];
		app.fixedcost = costSvc.calc( param );
		app.txnmode = "CAPTURE";
		app.appno = app.permitno;
		app.permittype = "BUILDING PERMIT";
		app.orgcode = env.ORGCODE;
		appEm.create( app );
	}

}