import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

public class BuildingPermitFeeService  {

	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BuildingPermitInfoService")
	def infoSvc;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_ancillary")
	def ancillaryEm;

	@DataContext("obo_section_type")
	def evalTypeEm;

	@DataContext("building_permit_fee")
	def feeEm;

	@ProxyMethod
	public def assess(o) {
		def params = [:];
		
		def vapp = vwAppEm.find( [objid: o.appid ] ).first();

		def m = [:];
		m.appno = vapp.appno;
        m.appdate = vapp.dtfiled; 
        m.apptype = vapp.apptype;
        m.projectcost = vapp.projectcost;
        m.fixedcost = vapp.fixedcost;
        
        m.highercost = (vapp.fixedcost > vapp.projectcost ) ? vapp.fixedcost : vapp.projectcost;

        m.height = vapp.height;
        m.numunits = vapp.numunits;
        m.totalfloorarea = vapp.totalfloorarea;
        m.zoneclass = vapp.zoneclassid;
        params.app = m;

        def occ = [:];
        occ.group = vapp.occupancytype.group.objid;
        occ.division = vapp.occupancytype.division.objid;
        occ.type = vapp.occupancytype.objid;
        params.occupancytype = occ;

        params.permits = [];
        /*
		def list1 = evalTypeEm.where( "permitid IS NULL OR permittype.type <> 'ANCILLARY' ").list()*.objid;
		def list2 = ancillaryEm.select("type.evaluationtypeid").find( [appid: o.appid ] ).list()*.type.evaluationtypeid;
		(list1+list2).each {
			params.permits << [type: it ];
		}
		*/
		def list1 = evalTypeEm.where( "1=1").list()*.objid;
		list1.each {
			params.permits << [type: it ];
		}

		params.infos = infoSvc.getInfos( [appid: o.appid ] );

		def res = billingRuleSvc.execute( [rulename:'oboassessment', params: params, include_items: false ] );
		res.billitems.findAll{ it.billcode && it.item == null }.each {
			def p = itemAcctEm.find( [objid: it.billcode ] ).first()
			it.item = p.item;
			it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
		}
		def result = [:] 
		def items = res.billitems.findAll{ it.amount > 0 }.sort{ it.sortorder };
		items.each {
			def z = [:];
			z.item = [objid: it.billcode];
			z.amount = it.amount;
			z.amtpaid = 0;
			z.appid = o.appid;
			def zz = feeEm.find( [appid: o.appid, itemid: it.billcode] ).first();
			if( !zz ) {
				feeEm.create( z );
			}
		}

		def amount = res.billitems.sum{ it.amount };
		appEm.find( [objid: o.appid] ).update( [amount: amount ]);

		result.amount = amount;
		return result;
	}

	@ProxyMethod
	public def getFees( def o ) {
		return feeEm.find([appid: o.appid ]).orderBy("item.sortorder").list();
	}

	@ProxyMethod
	public def saveFees(o) {
		o.each {
			it.itemid = it.item?.objid;
			it.amtpaid = 0;
			feeEm.create(it);
		}
	}

	@ProxyMethod
	public def clearAssessment(def o ) {
		feeEm.find( [appid: o.appid ]).where("parentid IS NULL").delete();
		def val = feeEm.find( [appid: o.appid ]).select("c:{SUM(amount)}").val();
		appEm.find( [objid: o.appid] ).update( [amount: val ]);
		return [amount: val];
	}

}