import com.rameses.annotations.*; 

class OccupancyPermitFormReportInterceptor {
	
	@DataContext("occupancy_permit_payment")
	def pmtEm;

	@DataContext("vw_occupancy_permit")
	def permitEm;

	@DataContext("obo_doctype")
	def doctypeEm;

	@DataContext("sys_signature")
	def sigEm;

	@Service("FormReportService")
	def formReportSvc;

	@DataContext("vw_occupancy_permit_doc")
	def vwSubdocEm;

	@DataContext("occupancy_rpu")
	def rpuEm;

	@Service(value="JasperReportService", connection="rpt")
	def jasperSvc;

	String outputReportPath = "/apps/server/output/";

	def findPermit( def id ) {
		def permit = permitEm.find( [objid: id] ).first();	
		if(!permit) {
			throw new Exception("Permit not found");
		}
		return permit;
	}

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'occupancy_permit' }")
	public void getOccupancyPermitReport( def evt ) {
		def p = evt.args[0];

		def result = evt.result;
		def id = p.parameters.objid;

		def permit = findPermit( id );	
		def doctype = doctypeEm.find( [objid: 'OCCUPANCY_PERMIT'] ).first();

		if(!permit.template) {
			permit.template = doctype.template;		
		}
		def pmt = pmtEm.find( [appid: permit.objid ]).where("voided = 0").first();
		if( pmt ) {
			permit.receiptno = pmt.refno;
			permit.receiptdate = pmt.refdate;
			permit.amount = pmt.amount;					
		}
		if(permit.endorserid) {
			permit.endorser = sigEm.find( [objid: permit.endorserid ]).first();
		}
		if(permit.approverid) {
			permit.approver = sigEm.find( [objid: permit.approverid]).first();
		}

		result.data = permit;
	}	

	@Before(pattern="JasperEmailQueueService.send", eval="#{args[0].reportid == 'occupancy_permit' }")
	public void beforeSendEmailQueue( def evt ) {
		def p = evt.args[0];
		def pmt = findPermit( p.refid );
		if ( !p.to ) p.to = pmt.contact.email;
		
		p.info = pmt;
		p.connection = "obo-email-server";
	}

  	@Before(pattern="JasperReportEmailService.send", eval="#{ args[0].reportid == 'occupancy_permit' }", index=-10000)
    public void beforeSendEmail(def evt) {
        def o = evt.args[0];
        def refid = o.refid;
        def permit = formReportSvc.getData( [reportid:"occupancy_permit", parameters:[objid:refid] ] )?.data;
        o.attachments = [
            [ reportid: o.reportid, data: permit, title: "OccupancyPermit.pdf"],
        ];

        //load accompanying subdocuments
        def subdocs = vwSubdocEm.find( [appid: permit.objid ] ).where( "doctype.issuetype IN (2,3) AND NOT(doctype.template IS NULL) ").list();
        subdocs.each {
        	o.attachments << [ reportid: "occupancy_permit_doc", parameters: [objid: it.objid], title: it.doctypeid + ".pdf" ];
        }

        //load rpt documents
		def rpu = rpuEm.find( [appid: refid ]).first();
		if( rpu ) {
			try {
				if( rpu.truecopycertid ) {
					def res = jasperSvc.generateReport([reportid: "tdtruecopy", refid: rpu.truecopycertid ] );
		        	if(res.tokenid) {
		        		o.attachments << [title: "TaxClearance.pdf", filename:outputReportPath +res.tokenid + ".pdf" ];
		        	}
				}
				if( rpu.noaid ) {
			        def res = jasperSvc.generateReport([reportid: "rptnoa", refid: rpu.noaid ] );        	
			        if( res.tokenid ) {
		        		o.attachments << [title: "NoticeOfAssessment.pdf", filename:outputReportPath+res.tokenid+".pdf" ];        	
			        }
				}
        	}
        	catch( ignErr ) {
        		println "error generating rpt reports for email. " + ignErr.getMessage();
        	}		
		}


    }  


}