import com.rameses.annotations.*; 

class OboBuildingApplicationWorkitemWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@DataContext("obo_building_application_finding")
	def findingEm;

	@DataContext("vw_obo_building_application_workitem")
	def workitemEm;

	@Service("DateService")
	def dateSvc;


	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'obo_building_application_workitem' }") 
	public void checkFindingStatus( def evt ) {
		def p = evt.args[0];
		if( p.taskstate == 'approval' ) {
			def c = findingEm.find( [workitemid: p.refid ] ).select("c:{COUNT(*)}").where( "status IS NULL").val();
			if( c > 0 ) throw new Exception("Please indicate status for the finding");

			c = findingEm.find( [workitemid: p.refid ] ).select("c:{COUNT(*)}").where( "status = 'FOR-REVISION' ").val();
			if( c > 0 && p.action == 'approve' ) throw new Exception("Approve is not allowed. There are findings for revision.");
			if( c == 0 && p.action == 'revise' ) throw new Exception("For Revision not allowed. There are no findings for revision.");
		}
	} 

	//signal the parent 
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'obo_building_application_workitem' }") 
	public void signalParent( def evt ) {
		def p = evt.args[0];
		def r = evt.result;

		throw new Exception("check if there are items for " + p.refid );
		def appid = workitemEm.find( [objid: p.refid] ).select("appid").val();

		//check first of there are other workitems that have not yet ended
		def openItems = workitemEm.find([appid:appid] ).where( " NOT(task.state = 'end') ").select("c:{COUNT(*)}").val();
		if(!openItems) {
			def f = [:];
			f.processname = 'obo_building_application';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = p.action;
			wfSvc.signal(f);	
		}
		throw new Exception( "after action is " + p.action)
	} 

} 