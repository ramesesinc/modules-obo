import com.rameses.annotations.*;
import java.rmi.server.*;

class OccupancyPermitPersistenceInterceptor {
	
	@DataContext("occupancy_permit")
	def appEm;

	@DataContext("occupancy_permit_task")
	def appTaskEm;

	@DataContext("obo_control")
	def controlEm;

	@DataContext("vw_occupancy_permit")
	def vwAppEm;

	@DataContext("occupancy_permit_entity")
	def entityEm;

	@DataContext("occupancy_permit_payment")
	def paymentEm;

	@DataContext("occupancy_permit_doc")
	def subdocEm;

	@DataContext("occupancy_permit_requirement")
	def reqEm;

	@DataContext("obo_requirement_type")
	def reqTypeEm;

	@DataContext("obo_doctype")
	def doctypeEm;

	@DataContext("occupancy_permit_fee")
	def feeEm;

	@DataContext("obo_professional")
	def professionalEm;

	@DataContext("obo_professional_info")
	def professionalInfoEm;

	@DataContext("occupancy_rpu")
	def rpuEm;

	@DataContext("occupancy_permit_info")
	def appInfoEm;

	@Service("OboAppnoGeneratorService")
	def appSvc;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Env
	def env;

	private def calcFixedCost( def app ) {
		if( app.apptype == null || app.actualtotalfloorarea==null || app.occupancytype==null ) {
			def zapp = vwAppEm.find( [objid: app.objid ] ).select("apptype,actualtotalfloorarea,occupancytype.*").first();
			if(app.apptype==null) app.apptype = zapp.apptype;
			if(app.actualtotalfloorarea==null) app.actualtotalfloorarea = zapp.actualtotalfloorarea;
			if(app.occupancytype==null) app.occupancytype = zapp.occupancytype;
		}
		//calculate the cost first before receiving		
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.actualtotalfloorarea];
		param.occupancytype = app.occupancytype;
		return costSvc.calc( param );
	}

	//check if 	professional exists in the obo_professional database
    private void saveProfessional( def o ) {
    	if(!o.objid) return;
    	def p = professionalInfoEm.find( [objid: o.objid ]).first();
    	if( !p ) {
    		professionalInfoEm.create( o );
    	}
    	if(o.profid) {
    		def pp = professionalEm.find( [objid: o.profid ] ).first();
    		if(!pp) {
    			def m = [:];
    			m.objid = o.profid;
    			m.prcno = o.prc.idno;
    			m.profession = o.profession;
    			m.infoid = o.objid;
    			professionalEm.create( m );
    		}
    	}
    }


	//fire the workflow to start the process
    private void startWorkflow( def app ) {
		def p = [:];
		p.processname = 'occupancy_permit';
		p.refid = app.objid;
		p.startdate = dateSvc.getServerDate();
		p.info = app;
		p.assignee = [objid:env.USERID, name:env.FULLNAME];		
		wfSvc.start(p);
    }

    //create task
    private def saveTask( def app ) {
    	//add end application task
		def atask = [:];
		atask.refid = app.objid;
		atask.state =  app.task.state;
		atask.dtcreated = dateSvc.getServerDate();
		return appTaskEm.create( atask );
    }

    //create permit for capture
    private def savePermit( def app ) {
    	if(!app.permitno) return null;
    	def doctype = doctypeEm.find( [objid: "OCCUPANCY_PERMIT"] ).first();
		def bp = [:];	
		bp.appid = app.objid;
		bp.doctype = doctype;	
		bp.doctypeid = doctype.objid;		
		bp.controlno = app.permitno;
		bp.dtissued = app.permitdtissued;
		bp.expirydate = app.permitexpirydate;
		bp.issuedby = [ objid:env.USERID, name:env.FULLNAME];
		bp.state = 3;
		bp.template = doctype.template;
		bp.endorserid = doctype.endorserid;
		bp.approverid = doctype.approverid;
		bp.reportheader = doctype.reportheader;
		return controlEm.create( bp );
    }

    //save payment
    private def savePayment( def app ) {
    	if(!app.receiptno) return null;
		def pmt = [:];
		pmt.appid = app.objid;
		pmt.refno = app.receiptno;
		pmt.refdate = app.receiptdate;
		pmt.amount = app.amtpaid;
		pmt.reftype = "cashreceipt";
		pmt.voided = 0;
		return paymentEm.create( pmt );	
    }

	//save all documents that are auto create that does not exist above
    private void saveInitialDocuments( def app ) {
		subdocEm.getSubdocsToAutoCreate( [apptype:'occupancy', appid: app.objid ]).each {
			def sd = [:];
			sd.appid = app.objid;
			sd.doctype = [objid: it.objid];
			sd.amount = 0;
			sd.state = 0;
			subdocEm.create( sd );			
		}	
    }

	//save the requirements
    private void saveRequirements( def app ) {
		def reqTypes = reqTypeEm.where("permittype = 'occupancy_permit' ").list();
		reqTypes.each {
			def r = [:];
			r.appid = app.objid;
			r.state = 0;
			r.typeid = it.objid;
			r.type = [objid: it.objid];
			reqEm.create( r );
		}
    }

    private void saveEntities( def app ) {
    	if(!app.entities) return;
    	app.entities.each {
    		if( it.objid != app.applicantid ) {
				it.appid = app.objid;
				entityEm.create( it );    		
    		}
		}
    }

    private void saveBfpSalesTax( def app ) {
    	if(!app.infos) return;
    	//check the permit type if it exists
    	def t = "BFP_SALES_TAX";
    	def doc = subdocEm.find( [appid: app.objid, doctypeid: t]).first();
    	if( !doc ) {
    		doc = [:];
			doc.appid = app.objid;
			doc.doctype = [objid: t];
			doc.amount = 0;
			doc.state = 0;
			doc = subdocEm.create( doc );		
    	} 
    	app.infos.each {
    		if(!it.value) return;
    		def info = [:];
    		info.appid = app.objid;
    		info.parentid = doc.objid;
    		info.name = it.name;
			info.type = [name: it.name ];
			info.decimalvalue = it.value;
			appInfoEm.create( info );
    	}

    }

    private void saveProfessionals( def app ) {
    	/*
    	println "save professionals";
    	if(!app.professionals) return;
    	println "start saving professionals";
    	app.professionals.each {
    		println it;
    	}
    	*/
    }

 	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'occupancy_permit' }")
	public void beforeCreateApplication(def evt) {
		def app = evt.args[0];
		if(!app.applicant) throw new Exception("Applicant is required");
		if( app.txnmode == "CAPTURE" ) {
			if(!app.appno) {
				app.appno = appSvc.generate([apptype:"occupancy_permit"]);
			}	
		}
		if(app.trackingno) {
			def orgno = env.ORGID;
			if( !app.trackingno.startsWith(orgno) ) {
				app.trackingno = orgno + "-" + app.trackingno;
			}
		}	

		/*
		app.each { k,v->
			println k+"="+v;
		}
		throw new Exception("save occupancy txntype " + app.bldgpermit?.txntype );
		*/

		//check first all professionals if exist in the obo_professional table
		app.objid = "OAPP" + new UID();
		app.orgcode = env.ORGID;
		app.occupancytypeid = app.occupancytype?.objid;
		app.supervisorid = app.supervisor?.objid;
		app.apptype = app.apptype?.toUpperCase();


		//remove appid from applicant so it can be saved
		app.applicant.remove("appid");
		app.applicant = entityEm.create( app.applicant );
		app.applicantid = app.applicant.objid;

		//save the supervisor
		saveProfessional( app.supervisor );		

		app.createdby = [objid: env.USERID, name: env.FULLNAME];
		app.dtcreated = dateSvc.getServerDate();
		app.fixedcost = calcFixedCost( app ); 
	}

	@After(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'occupancy_permit' }")
	public void afterCreateApplication(def evt) {
		def app = evt.args[0];
		def result = evt.result;

		//save appid of entity
		entityEm.find( [objid: app.applicant.objid ] ).update( [appid: app.objid] );

		if( app.txnmode == "CAPTURE" ) {
			def tsk = saveTask( app );
			def permit = savePermit( app );
			savePayment( app );
			def u = [:];
			u.taskid = tsk.taskid;
			if( permit?.objid ) u.controlid = permit.objid;
			appEm.find([objid:app.objid]).update( u );

			if( app.task.state == 'requirement-verification' ) {
				saveRequirements( app );
			}
			if( app.task.state != 'end') {
				saveInitialDocuments( app );
			}
		}
		else {
			saveEntities( app );
			saveProfessionals( app );
			saveInitialDocuments( app );			
			saveBfpSalesTax( app );
			saveRequirements( app );
			startWorkflow( app );
		}
	}

	//OCCUPANCY PERMIT APPLICATION
	@Before(pattern="PersistenceService.update", eval="#{ args[0]._schemaname == 'occupancy_permit' }")
	public void beforeUpdateApplication(def evt) {
		def app = evt.args[0];
		if( app.supervisor ) {
			app.supervisorid = app.supervisor.objid;
		}
		if( app.actualtotalfloorarea ) {
			app.fixedcost = calcFixedCost( app );	
		}
		if( app.occupancytype?.objid  ) {
			app.occupancytypeid = app.occupancytype?.objid;
			app.fixedcost = calcFixedCost( app );		
		}
		if( app.applicant?.objid ) {
			entityEm.find( [objid: app.applicant.objid]).update( app.applicant );
		}
	}

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'vw_occupancy_permit' }")
	public void afterOpenApplication(def evt) {
		def p = evt.args[0];
		def a = evt.result;
		a.occupancytype.title = a.occupancytype.title?.toUpperCase();

		//auto compute fees after opening:
		a.amount = feeEm.find([appid:a.objid]).select("c:{SUM(amount)}").val();
		a.payment = paymentEm.find([appid: a.objid ]).where("voided=0").orderBy("refdate DESC, refno DESC").first();
	}


	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'occupancy_permit' }")
	public void beforeRemoveApp( def evt ) {
		def p = evt.args[0];
		def app = vwAppEm.find( [objid: p.objid]).first();
		if( app.task.state != 'receiving') 
			throw new Exception("Application can only be removed in receiving state");

		appEm.find([objid: app.objid]).update( [applicantid: "{NULL}", taskid: "{NULL}" ] );
		appInfoEm.find( [appid: app.objid ] ).delete();
		entityEm.find( [appid: app.objid] ).delete();
		subdocEm.find( [appid: app.objid] ).delete();	
		appTaskEm.find( [refid: app.objid] ).delete();
		reqEm.find( [appid: app.objid] ).delete();
	} 

}