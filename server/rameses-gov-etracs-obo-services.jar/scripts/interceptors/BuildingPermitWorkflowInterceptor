import com.rameses.annotations.*; 

/* ******************************************************************************************************
Notes:
The ff. are generic actions with similar related actions
1. send-for-verification = do nothing special; this action is triggered by the system when all evaluations are complete
2. send-for-revision = invoked by OBO verifier. triggers all email messages
3. reactivate - to be invoked by OBO receiving
approve - invoked by OBO Verifier. 
******************************************************************************************************* */
class BuildingPermitWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("DateService")
	def dateSvc;


	@DataContext("building_permit_section")
	def evalEm;

	@DataContext("vw_building_permit_section")
	def vwSectionEm;

	@DataContext("vw_building_permit_ancillary")
	def vwAncillaryEm;

	@DataContext("obo_section")
	def sectionEm;

	@DataContext("building_permit_requirement")
	def reqEm;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_finding")
	def findingEm;

	@DataContext("building_permit_fee")
	def feeEm;

	@DataContext("building_permit_transmittal")
	def transmittalEm;


	/* *********************************************************************
	//Specific before action tasks
	************************************************************************ */
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit' && args[0].action == 'send-for-revision' }") 
	public void doActionBeforeRevision( def evt ) {
		def p = evt.args[0];
		def t = transmittalEm.find( [taskid: p.taskid] ).first();
		if(!t) throw new Exception("Please create a verification checklist first");
	}

	//This is the part where you need to check for application specific routines
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit' && args[0].action == 'approve' }") 
	public void doActionBeforeApproval( def evt ) {
		def p = evt.args[0];
		if( p.to == 'zoning-evaluation' ) {
			def appno = appEm.find( [objid: p.refid ] ).select("appno").val();
			if(!appno ) throw new Exception("Please generate the application number first");
		} 
		else if( p.to == "payment") {
			def c = feeEm.find( [appid: p.refid ]).select("c:{COUNT(*)}").val();
			if( c == 0 )
				throw new Exception("There must be at least one fee");		
		}
		else {
			//check if there are open findings
			def t = findingEm.find( [appid: p.refid ] ).select("c:{COUNT(*)}").where("supersederid IS NULL AND state=2").val();
			if( t > 0) throw new Exception("All findings must be resolved first.");
		}
	}


	/* *********************************************************************
	//Evaluation-related triggers
	************************************************************************ */
	private void fireEvaluationWorkflow( refid, filter, action ) {
		def list = vwSectionEm.select("objid,taskid").find( [appid: refid ] ).where( filter ).list();
		if( list ) {
			def dt = dateSvc.getServerDate();
			list.each {
				def f = [:];
				f.processname = 'building_permit_section';
				f.refid = it.objid;
				f.taskid = it.taskid;
				f.startdate = dt;
				f.action = action;
				f.info = [:];
				wfSvc.signal(f);	
			}		
		}
	}

	//approve. check if there are evaluations where the task state is for-revision and reactivate each
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit' && args[0].action == 'approve' }" ) 
	public void approveEvaluationTasks( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def appid = p.refid;


		//start the next evaluation tasks. fire evaluations for required sections as well as optional that has existing ancillary 
		def mlist = sectionEm.where(" buildingpermitstate = :state  AND optional=0 ", [state: result.state] ).list()*.objid;
		//throw new Exception("state is " + mlist );

		//find sections that are optional and check if it has ancillary 
		def olist = sectionEm.where(" buildingpermitstate = :state AND optional=1 ", [state: result.state] ).list()*.objid;
		def alist = vwAncillaryEm.find( [appid: appid ] ).list()*.sectionid;
		olist.each {
			if( alist.contains(it) ) mlist << it;
		}

		if( mlist ) {
			def dt = dateSvc.getServerDate();
			mlist.each {
				//create each evaluation but check first if task exists
				def m = [appid: appid, typeid: it ]
				boolean b = evalEm.find( m ).exists();
				if(!b) {
					m = evalEm.create( m );
					def f = [:];
					f.processname = 'building_permit_section';
					f.refid = m.objid;
					f.startdate = dt;
					f.info = [ type: it ];
					wfSvc.start(f);				
				}
			}
		}		
	}

	//for-reactivation. check if there are evaluations where the task state is for-revision and reactivate each
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit' && args[0].action == 'reactivate' }" ) 
	public void reactivateEvaluationTasks( def evt ) {
		def p = evt.args[0];
		fireEvaluationWorkflow( p.refid, " task.state = 'for-revision' ", "reactivate" );
	}

	//actions after payment
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit' && args[0].action=='post-payment' }") 
	public void doActionsOnPostPayment( def evt ) {
		def p = evt.args[0];
		fireEvaluationWorkflow( p.refid, " permitid IS NULL ", 'end-task' );
		fireEvaluationWorkflow( p.refid, " NOT(permitid IS NULL) ", 'send-for-release' );		
	}


} 