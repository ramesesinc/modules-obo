import com.rameses.annotations.*; 
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

class BuildingApplicationAssessmentInterceptor {
	
	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@Service("OboApplicationInfoService")
	def infoSvc;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

	@DataContext("vw_building_application")
	def vwAppEm;

	@DataContext("building_application")
	def appEm;

	@DataContext("building_application_subdoc")
	def subdocEm;

	@DataContext("building_application_fee")
	def feeEm;

	@DataContext("building_application_rpu")
	def rpuEm;

	@After(pattern="OboApplicationFeeService.assess", eval="#{args[0]._schemaname == 'building_application_fee' }")
	public void getBuildingAssessment( def evt ) {
		def o = evt.args[0];
		def result = evt.result;

		def vapp = vwAppEm.find( [objid: o.appid ] ).first();

        if(! vapp.zoneclass?.objid )
            throw new Exception("Please specify a zone class first");

		def occ = vapp.occupancytype;
		def infos = [];
		def factBuilder = new FactBuilder();
		factBuilder.facts << new BuildingApplication( vapp ); 
        factBuilder.facts << new OccupancyType( occ );
		factBuilder.variableInfoProvider = new DefaultVariableInfoProvider(
			schemaName:"obo_variable",
			createDecimalFact: { return new OboDecimalInfo() },
			createIntegerFact: { return new OboIntegerInfo() },
			createBooleanFact: { return new OboBooleanInfo() }
		);

		if( o.parentid ) {
			def sd = subdocEm.find([objid: o.parentid ] ).first();	
			//this is for subapplications
			factBuilder.facts << new BuildingSubdoc( doctype: sd.doctype.objid );
			infos = infoSvc.getInfos( [parentid: o.parentid, _schemaname: "vw_building_application_info" ] );
		}
		else {
			//this is for applications
			infos = infoSvc.getInfos( [appid: o.appid, _schemaname: "vw_building_application_info" ] );	
			//load count of RPUs
			def rpu = new RpuCount();
			rpu.byownercount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT( DISTINCT ownerid )}").val();
			rpu.totalcount = rpuEm.find( [appid: o.appid ] ).select("c:{COUNT(*)}").val();
			factBuilder.facts << rpu;
			factBuilder.facts << new BuildingSubdoc( doctype: "BUILDING_PERMIT" );
		}

		def req = [:];
		req.factBuilder = factBuilder;
		req.rulename = "oboassessment";
		req.params = [infos: infos];
		req.include_items = false;

		def res = billingRuleSvc.execute( req );

		def items = [];
		res.billitems.findAll{ it.billcode && it.item == null && it.amount > 0 }.each {
			def p = itemAcctEm.find( [objid: it.billcode ] ).first();
			it.item = p;
			if(o.parentid) it.parentid = o.parentid;
			it.amtpaid = 0;
			it.appid = o.appid;
			it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
			items << it;			
		};

		if(!o.savefees) {
			result.items = items;
		}
		else {
			//return saveFees( [appid:o.appid, parentid:o.parentid, items: items] );
		}
	}	

	def updateTotals( def o ) {
		def result = [:];

		//update the amount in the application also
		def total = feeEm.find([appid:o.appid]).select("c:{SUM(amount)}").val();
		if( total == null) total = 0;
		appEm.find( [objid:o.appid]).update( [amount: total] );

		if( o.parentid ) {
			total = feeEm.find([parentid:o.parentid]).select("c:{SUM(amount)}").val();
			if(total==null) total = 0; 
			subdocEm.find( [objid:o.parentid]).update( [amount: total] );
		}
		return [amount: total];
	}

	@After(pattern="OboApplicationFeeService.(save|clear|remove).*", eval="#{args[0]._schemaname == 'building_application_fee' }")
	public void updateTotals( def evt ) {
		def a = evt.args[0];
		def result = evt.result;
		def v = updateTotals( a );
		result.amount = v.amount;
	}
}