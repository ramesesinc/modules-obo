import com.rameses.annotations.*;

class BuildingApplicationPersistenceInterceptor {
	
	@Service("DateService")
	def dateSvc;

	@Service("OboConstructionCostRuleService")
	def costSvc;


	@DataContext("building_application_requirement")
	def reqEm;

	@DataContext("building_evaluation_finding")
	def findingEm;

	@DataContext("building_application_transmittal")
	def transmittalEm;

	@DataContext("building_application_rpu")
	def rpuEm;

	@DataContext("building_application_entity")
	def appEntityEm;

	@DataContext("vw_building_application_subdoc")
	def vwSubdocEm;

	@DataContext("vw_building_application")
	def vwAppEm;

	@DataContext("building_evaluation_type")
	def beType;

	@DataContext("building_application_fee")
	def feeEm;

	@DataContext("building_application_payment")
	def pmtEm;

	@Env
	def env;

	//REQUIREMENTS
	@Before(pattern="PersistenceService.(create|update)", eval="#{args[0]._schemaname == 'building_application_requirement' }") 
	public void onSaveRequirement( def evt ) {
		def o = evt.args[0];
		o.reviewer = [objid: env.USERID, name: env.FULLNAME ];
		o.dtreviewed = dateSvc.getServerDate();
	} 
	
	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'building_application_requirement' }") 
	public void afterCreateReq( def evt ) {
		def o = evt.args[0];
		def z = evt.result;
		if(o.previd ) {
			reqEm.find( [objid: o.previd] ).update( [supersederid: z.objid ] );
		}	
	} 

	//FINDINGS
	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'building_evaluation_finding' }") 
	public void beforeSaveFinding( def evt ) {
		def o = evt.args[0];
		o.createdby = [objid: env.USERID, name: env.FULLNAME ];
		o.dtcreated = dateSvc.getServerDate();
	} 

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'building_evaluation_finding' }") 
	public void afterUpdateFinding( def evt ) {
		def o = evt.args[0];
		def z = evt.result;
		if(o.previd ) {
			findingEm.find( [objid: o.previd] ).update( [supersederid: z.objid ] );
		}	
	} 

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'building_application_subdoc' }")
	public void beforeRemoveApplicationSubdoc(def evt) {
		def app = evt.args[0];
		def subdoc = vwSubdocEm.find( [objid: app.objid]).first();
		def docorgid = subdoc.doctype?.org?.objid;
		boolean b = false;

		if( docorgid !=null ) {
			if(docorgid==env.ORGID) b = true;
		}
		else {
			if( env.ORGROOT == 1) b = true;
		}
		if(!b) 
			throw new Exception("You cannot remove this document. Only the org associated with this document can remove this");
	}

	//BUILDING PERMIT APPLICATION
	@Before(pattern="PersistenceService.update", eval="#{ args[0]._schemaname == 'building_application' }")
	public void beforeUpdateApplication(def evt) {
		def app = evt.args[0];
		app.occupancytypeid = app.occupancytype?.objid;

		//update the fixed cost
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = app.occupancytype;

		def cost = costSvc.calc( param );
		app.fixedcost = cost;		

		appEntityEm.find( [objid: app.applicantid]).update( app.applicant );
	}

	@After(pattern="PersistenceService.update", eval="#{ args[0]._schemaname == 'building_application' }")
	public void afterUpdateApplication(def evt) {
		def app = evt.args[0];
		appEntityEm.cleanUpEntity( [appid: app.objid] );
	}	

	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'building_application_rpu' }")
	public void beforeUpdateApplicationRPU(def evt) {
		def o = evt.args[0];
		//search first if entity exists in application_entity;	
		def appOwner = appEntityEm.find( [appid: o.appid, profileid: o.owner.objid] ).first();
		if( !appOwner ) {
			o.owner.appid = o.appid;
			appOwner = appEntityEm.create( o.owner );
		}
		o.ownerid = appOwner.objid;
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'building_application_rpu' }")
	public void beforeRemoveApplicationRPU(def evt) {
		def o = evt.args[0];
		def rpu = rpuEm.find( [objid: o.objid] ).first();
		o.appid = rpu.appid;
	}

	@After(pattern="PersistenceService.removeEntity", eval="#{ args[0]._schemaname == 'building_application_rpu' }")
	public void afterRemoveApplicationRPU(def evt) {
		def o = evt.args[0];
		appEntityEm.cleanUpEntity( [appid: o.appid] );
	}

	@After(pattern="PersistenceService.read", eval="#{ args[0]._schemaname == 'vw_building_application' }")
	public void afterOpenApplication(def evt) {
		def p = evt.args[0];
		def a = evt.result;
		a.occupancytype.title = a.occupancytype.title?.toUpperCase();

		//lookup if there is existing transmittal
		if( a.task.state.matches(".*(verification|revision)") ) {
			def t = transmittalEm.find( [taskid: a.taskid ]).first();
			if( t ) {
				a.transmittalid = t.objid;
			}
		}

		//auto compute fees after opening:
		a.amount = feeEm.find([appid:a.objid]).select("c:{SUM(amount)}").val();

		a.payment = pmtEm.find([appid: a.objid ]).where("voided=0").first();
	}


}