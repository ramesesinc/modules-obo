import com.rameses.annotations.*; 
import obo.facts.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

class OboFactBuilderInterceptor { 

	@After(pattern="FactBuilderService.getFacts", eval="#{ args[0].rulename == 'oboassessment' }")
	public void buildFacts(def evt) {
		def factBuilder = evt.result; 
		def params = evt.args[0].params;
		
		factBuilder.facts << new BuildingApplication( params.app );
		factBuilder.facts << new OccupancyType( params.occupancytype );
		factBuilder.variableInfoProvider = new DefaultVariableInfoProvider(
			schemaName:"obo_variable",
			createDecimalFact: { return new OboDecimalInfo() },
			createIntegerFact: { return new OboIntegerInfo() },
			createBooleanFact: { return new OboBooleanInfo() }
		);
		params.permits?.each {
			factBuilder.facts << new AncillaryPermit( it );
		}

		factBuilder.facts.each {
			if(it instanceof BuildingApplication ) println "apptype is " + it.apptype;
			if(it instanceof AncillaryPermit ) println "permit type is " + it.type;
			println it;
		}

		/*
		def svrDate = dateSvc.getServerDate();
		fb.facts << new BuildingUse( o.buildinguse );
		fb.facts << new OboApplication(o.application);
		fb.facts << new treasury.facts.SystemDate(svrDate);
		fb.facts << new treasury.facts.BillDate( (o.billdate) ?o.billdate: svrDate );
		o.permits?.each { p->
			fb.facts << new AuxiliaryPermit( permittype:p.permittype );
		}		

		def m = [items: [], infos:[]];	
		def resultHandler = [
			getFactKeyValue : { v->
				if(v instanceof BillItem) {
					m.items << v.toMap();
				}	
				else if(v instanceof OboApplication) {
					m.constructioncost = v.constructioncost;
				}
				else if( v instanceof OboVariableInfo ) {
					if( v.amount > 0 ) {
						m.infos << v.toMap();
					}
				}
				return null;
			}
		] as ResultHandler;

		assmtSvc.execute( "oboassessment", data, fb, resultHandler );

		m.fees = m.items.sort{ it.sortorder };
		m.amount = m.items.sum{ it.amount };
		return m;
		*/


	}


} 