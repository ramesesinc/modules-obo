import com.rameses.annotations.*; 

class BuildingApplicationAssessmentReportInterceptor {
	
	@DataContext("vw_building_application")
	def appEm;

	@DataContext("building_application_fee")
	def feeEm;

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'building_application_assessment' }")
	public void getBuildingApplicationAssessmentReport( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def objid = p.parameters.objid;
		if(!objid) throw new Exception("objid is required in assessment report")

		def data = appEm.find( [objid: objid ]).first();

		data.permittype =  "BUILDING PERMIT" ;
		data.items = feeEm.getCategorizedFees( [appid: objid ] );;
		result.data = data;
	}	


	@Before(pattern="JasperEmailQueueService.send", eval="#{ args[0].reportid == 'building_application_assessment' }")
	public void beforeSendEmail( def evt ) {
		def p = evt.args[0];
		def ea = appEm.find( [objid: p.refid ] ).first();
		p.to = ea.contact.email;
		p.info = ea;
	}

	@Before(pattern="JasperReportEmailService.send", eval="#{ args[0].reportid.matches('(building|occupancy).*_assessment') }", index=-10000)
    public void emailAssessment(def evt) {
        def o = evt.args[0];
        def refid = o.refid;
        o.attachments = [
            [ title: "OrderOfPayment.pdf", reportid: o.reportid, parameters: [objid: refid ], template: "reports/obo/assessment" ]
        ];
        o.to = o.to;
        o.subject = o.subject;
        o.message = o.message;
        o.connection = "obo-email-server";
    }   


}