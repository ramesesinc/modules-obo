import com.rameses.annotations.*; 

class OboMenuNotificationInterceptor {
	
	@Service("WorkflowTaskCountService")
	def taskCountSvc;

	@DataContext("building_permit")
	def bldgPermitEm;

	@ActiveDB("building_evaluation_type")
	def evalTypeEm;

	@DataContext("occupancy_permit")
	def occPermitEm;

	@ActiveDB("occupancy_inspection_type")
	def inspectionTypeEm;

	@Service("OboUserRoleService")
	def userRole;

	@Env
	def env;

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'obo' }")
	public void getDomainCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def orgid = (env.ORGROOT ==1 ) ? "root" : env.ORGID;
		def roleStr = userRole.getRolesString( [:] );

		def cnt = 0;
		def nid = p.notificationid;

		//Building Application count
		def g = taskCountSvc.getProcessTaskCount( [processname: "building_application", domain: "OBO", notificationid: nid ] );
		if( g ) cnt += g.count;

		//Building Application count
		g = evalTypeEm.getAllTaskCount( [roles: roleStr, orgid: orgid] );
		if( g ) cnt += g.count;

		g = taskCountSvc.getProcessTaskCount( [processname: "occupancy_application", domain: "OBO", notificationid: nid ] );
		if( g ) cnt += g.count;

		g = inspectionTypeEm.getAllTaskCount( [roles: roleStr, orgid: orgid] );
		if( g ) cnt += g.count;

		result.count = cnt;
	}	


	/************************************************************************************************************
	* BUILDING PERMIT APPLICATION
	************************************************************************************************************/
	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'building_application' }")
	public void getBuildingApplicationTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		result.count = taskCountSvc.getProcessTaskCount( [processname: "building_application", domain: "OBO", notificationid: nid ] ).count;
	}	

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid.startsWith('building_evaluation:') }")
	public void getBuildingEvaluationTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid
		def procname = nid.split(":")[0];
		def cnt = taskCountSvc.getProcessTaskCount( [processname: procname, domain: "OBO", notificationid: nid ] );
		if(cnt) result.count = cnt.count;
	}	

	//temporary location here for getting roles count
	@After( pattern="WorkflowTaskCountService.getCustomNodeListTaskCount", eval="#{ args[0].processname == 'building_evaluation' }" )
	public void loadCount(  def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def narr = p.notificationid.split(":");
		def sectionid = narr[1];
		def roleStr = userRole.getRolesString( [:] );

		def list = evalTypeEm.getNodeListTaskCountBySection( [sectionid: sectionid, roles: roleStr ] );
		if( !list ) {
			list = [[count: 0]];
		}
		result.addAll( list );
	}

	/************************************************************************************************************
	* OCCUPANCY PERMIT APPLICATION
	************************************************************************************************************/
	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid == 'occupancy_application' }")
	public void getOccupancyApplicationTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid;
		def cnt = taskCountSvc.getProcessTaskCount( [processname: "occupancy_application", domain: "OBO", notificationid: nid ] );
		if( cnt ) result.count = cnt.count;
	}	

	@After(pattern="MenuNotificationService.getCount", eval="#{ args[0].notificationid.startsWith('occupancy_inspection:') }")
	public void getOccupancyInspectionTaskCount( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def nid = p.notificationid
		def procname = nid.split(":")[0];
		def cnt = taskCountSvc.getProcessTaskCount( [processname: procname, domain: "OBO", notificationid: nid ] );
		if(cnt) result.count = cnt.count;
	}	

	//temporary location here for getting roles count
	@After( pattern="WorkflowTaskCountService.getCustomNodeListTaskCount", eval="#{ args[0].processname == 'occupancy_inspection' }" )
	public void loadOccupancySectionCount(  def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def narr = p.notificationid.split(":");
		def sectionid = narr[1];
		def roleStr = userRole.getRolesString( [:] );

		def list = inspectionTypeEm.getNodeListTaskCountBySection( [sectionid: sectionid, roles:  roleStr ] );
		if( !list ) {
			list = [[count: 0]];
		}
		result.addAll( list );
	}

	/************************************************************************************************************
	* OTHERS
	************************************************************************************************************/
	/*
	def building_permit = { o->
		return bldgPermitEm.select( "c:{COUNT(*)}" ).where("state = 0").val();
	}
	*/



}