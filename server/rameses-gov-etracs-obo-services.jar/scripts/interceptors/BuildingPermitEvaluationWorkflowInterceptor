import com.rameses.annotations.*; 

class BuildingPermitEvaluationWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit_finding")
	def findingEm;

	@DataContext("vw_building_permit_evaluation")
	def evalEm;

	/**********************************************************************************************
	* REMEMBER: This is the building_permit_evaluation process flow
	***********************************************************************************************/
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_evaluation' && args[0].action == 'send-for-verification' }") 
	public void beforeSendForVerification( def evt ) {
		def p = evt.args[0];
		def v = evalEm.find( [objid: p.refid ]).first();
		if( v.typeid.toLowerCase() == 'zoning' ) {
			if(v.app.zoneclass?.objid == null ) {
				throw new Exception("Please specify zone classification");	
			}
		}
	} 

	//signal the parent 
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_evaluation' && args[0].action == 'send-for-verification' }") 
	public void signalParent( def evt ) {
		def p = evt.args[0];
		def r = evt.result;
		def appid = evalEm.find( [objid: p.refid] ).select("appid").val();
		//check first of there are other e that have not yet ended. If there are open, do not fire the parent application
		def openItems = evalEm.find([appid:appid] ).where( "task.state NOT IN ('for-verification', 'end') ").exists();
		if(!openItems) {
			def f = [:];
			f.processname = 'building_permit';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = 'send-for-verification';
			wfSvc.signal(f);	
		}
	} 

} 