import com.rameses.annotations.*;

class OccupancyInspectionWorkflowInterceptor {
	
	@DataContext("occupancy_inspection_finding")
	def findingEm;

	@DataContext("vw_occupancy_inspection")
	def sectionEm;

	@DataContext("occupancy_application_fee")
	def feeEm;

	@DataContext("vw_occupancy_application")
	def appEm;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'occupancy_inspection' && args[0].action == 'send-for-revision' }" ) 
	public void doActionBeforeRevision( def evt ) {
		def p = evt.args[0];
		def c = findingEm.find([parentid: p.refid]).where("state = 2 AND supersederid IS NULL").select("c:{COUNT(*)}").val();
		if( c == 0 ) throw new Exception("There must be at least one open finding");
	}


	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'occupancy_inspection' && args[0].action == 'approve' }" ) 
	public void doActionBeforeApprove( def evt ) {
		def p = evt.args[0];
		def c = findingEm.find([parentid: p.refid]).where("state = 2 AND supersederid IS NULL").select("c:{COUNT(*)}").val();

		if( c > 0 ) throw new Exception("There must be no unresolved findings");
		//check here if there are fees
		def vs = sectionEm.find( [objid: p.refid] ).first();
		if(vs.type.requirefee == 1 ) {
			def pp = [appid: vs.appid, sectionid: vs.typeid ];

			c = feeEm.find( pp ).select("c:{COUNT(*)}").val();
			if( c == 0 ) throw new Exception("There must be at least one fee for this section");
		}
	}


	//release process. Ensure that all tasks are closed before firing main
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'occupancy_inspection' && args[0].action.matches('send-for-revision|approve') }" ) 
	public void doActioAfterApproveOrRevise( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def appid = sectionEm.find( [objid: p.refid] ).select("appid").val();
		def cnt = sectionEm.find([appid:appid]).select("c:{COUNT(*)}").where( " task.state NOT IN ('for-revision', 'end') ").val();
		if( cnt == 0 ) {
			def app = appEm.find([objid:appid]).select("task.*").first();
			def f = [:];
			f.processname = 'occupancy_application';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = 'send-for-verification';
			f.taskid = app.taskid;
			wfSvc.signal(f);
		}
	}

	
}