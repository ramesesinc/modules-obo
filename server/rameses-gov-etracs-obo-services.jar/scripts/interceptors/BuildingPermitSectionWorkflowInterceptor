import com.rameses.annotations.*; 

class BuildingPermitSectionWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("building_permit_finding")
	def findingEm;

	@DataContext("vw_building_permit_section")
	def sectionEm;

	@DataContext("building_permit_fee")
	def buildingEm;

	@DataContext("building_permit")
	def appEm;

	/**********************************************************************************************
	* REMEMBER: This is the building_permit_section process flow
	***********************************************************************************************/
	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section' }") 
	public void beforeSendForVerification( def evt ) {
		def p = evt.args[0];
		def v = sectionEm.find( [objid: p.refid ]).first();
		if( v.typeid.toLowerCase() == 'zoning' ) {
			if(v.app.zoneclass?.objid == null ) {
				throw new Exception("Please specify zone classification");	
			}
		}
	} 

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section'  && args[0].action == 'send-for-revision' }") 
	public void beforeSendForRevision( def evt ) {
		def p = evt.args[0];
		def list = findingEm.find( [parentid: p.refid ] ).where("supersederid IS NULL AND state = 2 AND NOT(transmittalid IS NULL)").list();
		if(!list) throw new Exception("There must be at least one finding");
	} 

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section'  && args[0].action == 'approve' }") 
	public void beforeSendForOboProcessing( def evt ) {
		def p = evt.args[0];
		def list = findingEm.find( [parentid: p.refid ] ).where("supersederid IS NULL AND state = 2 AND NOT(transmittalid IS NULL)").list();
		if(list) throw new Exception("There must be no finding. If there are findings select Send for Revision instead");
	} 

	//signal the parent 
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'building_permit_section' && args[0].action.matches('send-for-revision|approve') }") 
	public void signalParent( def evt ) {
		def p = evt.args[0];
		def r = evt.result;
		def appid = sectionEm.find( [objid: p.refid] ).select("appid").val();
		def cnt = sectionEm.find([appid:appid]).select("c:{COUNT(*)}").where( " task.state NOT IN ('end', 'for-revision' ) ").val();
		if(cnt <=0) {
			def app = appEm.find([objid:appid]).select("task.*").first();
			def f = [:];
			f.processname = 'building_permit';
			f.refid = appid;
			f.startdate = dateSvc.getServerDate();
			f.info = [ app: p.info ];
			f.action = 'send-for-verification';
			f.taskid = app.taskid;
			wfSvc.signal(f);	
		}
	} 

} 