import com.rameses.annotations.*; 

class OboApplicationTransmittalInterceptor {
	
	@DataContext(dynamic=true)
	def em;

	//Loading the transmittal id while opening the file
	@After(pattern="PersistenceService.read", eval="#{args[0]._schemaname.matches('vw_building_permit|vw_occupancy_permit') }")
	public void afterOpenForTransmittal(def evt) {
		def p = evt.args[0];
		def a = evt.result;

		String nkey = (p._schemaname == 'vw_building_permit' ) ? "building_permit" : "occupancy_permit";

		if( a.task.state.matches(".*verification") ) {
			def transmittalEm = em.lookup( nkey + "_transmittal" );
			def t = transmittalEm.find( [taskid: a.taskid ]).first();
			if( t ) {
				a.transmittalid = t.objid;
			}
		}
		else if( a.task.state.matches(".*revision") ) {
			def transmittalEm = em.lookup( nkey + "_transmittal" );
			def taskEm = em.lookup( nkey + "_task");
			def prevtaskid = taskEm.find( [taskid: a.taskid] ).select("prevtaskid").val();
			def t = transmittalEm.find( [taskid: prevtaskid ]).first();
			if( t ) {
				a.transmittalid = t.objid;
			}
		}
	}


	@After(pattern="FormReportService.getData", eval="#{args[0].reportid.matches('.*transmittal')}")
	public void getBuildingPermitVerificationChecklistReport( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		def transmittalid = p.parameters.transmittalid;
		if(!transmittalid) throw new Exception("transmittalid is required in requirement checklist report")

		String nkey = (p.reportid == 'building_permit_transmittal' ) ? "building_permit" : "occupancy_permit";

		def transmittalEm = em.lookup( nkey + "_transmittal" );
		def t = transmittalEm.find([objid: transmittalid]).first();
		if(!t) throw new Exception("Transmittal " + transmittalid + " not found ");
		//check if requirement or finding transmittal.

		def appEm = em.lookup( "vw_" + nkey );
		def ea = appEm.find( [objid: t.appid ] ).first();
		ea.receiver = t.createdby;
		ea.transmittalno = t.objid;
		ea.transmittaltype = t.type;
		ea.permittype =  ( nkey == "building_permit" ) ? "BUILDING PERMIT" : "CERTIFICATE OF OCCUPANCY";

		if(t.type == "requirement") {
			def reqEm = em.lookup( nkey + "_requirement");
			ea.items = reqEm.find( [transmittalid : t.objid ] ).where( "supersederid IS NULL AND state = 2" ).orderBy("type.sortorder").list(); 
		}
		else {
			def findingEm = em.lookup( nkey + "_finding");
			ea.items = findingEm.find( [transmittalid : t.objid ] ).where( "supersederid IS NULL AND state = 2" ).orderBy("type.sortorder").list(); 
		}

		result.data = ea;
	}	


}