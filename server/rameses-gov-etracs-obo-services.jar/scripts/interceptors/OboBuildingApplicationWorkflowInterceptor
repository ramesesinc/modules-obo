import com.rameses.annotations.*; 

class OboBuildingApplicationWorkflowInterceptor { 

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("obo_building_application_requirement")
	def appReqEm;

	@DataContext("obo_requirement_type")
	def reqType;

	@DataContext("obo_building_application")
	def appEm;

	@DataContext("vw_obo_building_application_section")
	def subAppEm;

	@Before(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'obo_building_application' && args[0].action != 'reactivate' }") 
	public void checkApplicationPendings( def evt ) {
		//check if documents status <> 0
		def p = evt.args[0];
		def r = [appid:p.refid, processname:'obo_building_application', validationstate: p.taskstate];
		def buff = new StringBuffer();
		/*
		def docs = appEm.getUnvalidateRequirements( r );
		if( docs ) {
			buff.append("The ff. are unvalidated document requirements: \n")
			buff.append( docs.collect{"  "+it.title}.join("\n") );
			throw new Exception( buff.toString() );			
		}
		*/
		//check also if there are pending subapps not ended. but check only if activation is not caused by the subapp
		if( p.info?.subappid == null ) {
			def procs = subAppEm.find( [appid: p.refid ] ).where(" NOT(taskid IS NULL) AND NOT(task.state = 'end')  ").list();
			if (procs) {
				buff.append("The ff. are uncompleted processes: \n")
				buff.append( procs.collect{"  "+it.typetitle}.join("\n") );
				throw new Exception( buff.toString() );			
			}
		}
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'obo_building_application' && args[0].action == 'approve' }") 
	public void startSubApplicationTask( def evt ) {
		def p = evt.args[0];
		def r = evt.result;
		def appid = p.refid;

		//attach tasks for sections that have not yet been started
		def list = subAppEm.select("objid").find( [appid: p.refid] ).where("activationstate = :astate AND taskid IS NULL ", [astate: r.state ] ).list(); 
		if( list ) {
			def dt = dateSvc.getServerDate();
			list.each {
				def f = [:];
				f.processname = 'obo_building_application_section';
				f.refid = it.objid;
				f.startdate = dt;
				f.info = [ type: it.objid, app: p.info ];
				wfSvc.start(f);	
			}
		}	
	} 

	//FOR REACTIVATION
	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'obo_building_application' && args[0].action == 'reactivate' }" ) 
	public void reactivateSubapplicationTasks( def evt ) {
		def p = evt.args[0];
		def list = subAppEm.select("objid,taskid").find( [appid: p.refid ] ).where(" NOT(task.state = 'end') ").list();
		if( list ) {
			def dt = dateSvc.getServerDate();
			list.each {
				def f = [:];
				f.processname = 'obo_building_application_section';
				f.refid = it.objid;
				f.taskid = it.taskid;
				f.startdate = dt;
				f.action = "reactivate";
				f.info = [ : ];
				wfSvc.signal(f);	
			}
		}
	}

} 