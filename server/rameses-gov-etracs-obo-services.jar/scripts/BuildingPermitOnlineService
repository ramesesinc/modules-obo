import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

public class BuildingPermitOnlineService  {
	
	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_entity")
	def entityEm;

	@DataContext("building_permit_ancillary")
	def ancillaryEm;

	@DataContext("building_permit_rpu")
	def locationEm;

	@DataContext("building_permit_info")
	def appInfoEm;

	@DataContext("building_permit_professional")
	def professionalEm;

	@DataContext("building_permit_requirement")
	def reqEm;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("OboConstructionCostService")
	def costSvc;

	@ProxyMethod
	public def upload( def app ) {
		println "uploading application ->" + app;
		throw new Exception("uploading online app");
	}

	@ProxyMethod
	public def receive( def app ) {
		def dt = dateSvc.getServerDate();
		//calculate the cost first before receiving
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = [
			group: app.occupancytype.group.objid,
			division: app.occupancytype.division.objid,
			type: app.occupancytype.objid
		] 
		def cost = costSvc.calc( param );
		def u = [:];
		u.fixedcost = cost;		
		appEm.find( [objid: app.objid ] ).update( u );
		//fire the workflow to start the process
		def p = [:];
		p.processname = 'building_permit';
		p.refid = app.objid;
		p.startdate = dt;
		p.info = app;
		wfSvc.start(p);	
		return u;
	}

	

}