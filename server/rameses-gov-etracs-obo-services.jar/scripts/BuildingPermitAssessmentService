import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

public class BuildingPermitAssessmentService  {

	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BuildingPermitInfoService")
	def infoSvc;

	@DataContext("obo_itemaccount")
	def itemAcctEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit")
	def appEm;

	@DataContext("building_permit_ancillary")
	def ancillaryEm;

	@DataContext("obo_section")
	def sectionEm;

	@DataContext("building_permit_fee")
	def feeEm;

	@ProxyMethod
	public def assess(o) {
		def vapp = vwAppEm.find( [objid: o.appid ] ).first();
		def occ = vapp.occupancytype;
		def infos = [];
		def factBuilder = new FactBuilder();
		factBuilder.facts << new BuildingApplication( 
            appid: vapp.objid,
            appno: vapp.appno, 
            appdate: vapp.dtfiled, 
            apptype: vapp.apptype, 
            projectcost: vapp.projectcost, 
            fixedcost: vapp.fixedcost,
            height: ((vapp.height == null)?0:vapp.height),
            numunits: vapp.numunits,
            totalfloorarea: vapp.totalfloorarea,
            zoneclass: vapp.zoneclass?.objid,
            zone: vapp.zone,
            highercost: (vapp.fixedcost > vapp.projectcost ) ? vapp.fixedcost : vapp.projectcost
        );
        factBuilder.facts << new OccupancyType(
	        division:occ.division.objid, 
	        group:occ.group.objid, 
	        type:occ.objid
        );
		factBuilder.variableInfoProvider = new DefaultVariableInfoProvider(
			schemaName:"obo_variable",
			createDecimalFact: { return new OboDecimalInfo() },
			createIntegerFact: { return new OboIntegerInfo() },
			createBooleanFact: { return new OboBooleanInfo() }
		);

		if( o.sectionid ) {
			factBuilder.facts << new BuildingPermitSection( name: o.sectionid );
			if( o.ancillaryid ) {
				infos = infoSvc.getInfos( [parentid: o.ancillaryid ] );
			}
		}
		else {
			//loop all sections and permits
			/*
			params.permits?.each {
				//this is only temporary for discussion purposes
				if(it.type.toUpperCase() == 'FIRE') {
					it.type = it.type.toLowerCase();
				}	
				else {
					it.type = it.type.toUpperCase();
				}	
				def anc = new AncillaryPermit( it ); 
				factBuilder.facts << anc;
			}
			*/
		}

		def req = [:];
		req.factBuilder = factBuilder;
		req.rulename = "oboassessment";
		req.params = [infos: infos];
		req.include_items = false;


		def res = billingRuleSvc.execute( req );

		def items = [];
		res.billitems.findAll{ it.billcode && it.item == null && it.amount > 0 }.each {
			def p = itemAcctEm.find( [objid: it.billcode ] ).first();
			if( o.sectionid ==null || p.sectionid == o.sectionid ) {
				it.item = p;
				it.amtpaid = 0;
				it.appid = o.appid;
				it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
				items << it;			
			}
		};

		def result = [items:items]; 
		if( o.save_fees == true ) {
			items.each {
				def zz = feeEm.find( [appid: o.appid, itemid: it.item.objid ] ).first();
				if( !zz ) {
					feeEm.create( it );
				};
			}
			def amount = feeEm.find([appid:o.appid ]).select("c:{SUM(amount)}").val();
			appEm.find( [objid: o.appid] ).update( [amount: amount ]);
			result.amount = amount;
		}
		return result;
	}

	@ProxyMethod
	public def getFees( def o ) {
		return feeEm.find([appid: o.appid ]).orderBy("item.sortorder").list();
	}

	@ProxyMethod
	public def saveFees(o) {
		o.each {
			it.itemid = it.item?.objid;
			it.amtpaid = 0;
			feeEm.create(it);
		}
	}

	@ProxyMethod
	public def clearAssessment(def o ) {
		feeEm.find( [appid: o.appid ]).where("parentid IS NULL").delete();
		def val = feeEm.find( [appid: o.appid ]).select("c:{SUM(amount)}").val();
		appEm.find( [objid: o.appid] ).update( [amount: val ]);
		return [amount: val];
	}

}