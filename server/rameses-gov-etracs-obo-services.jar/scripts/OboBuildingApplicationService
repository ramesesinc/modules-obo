import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

public class OboBuildingApplicationService  {

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service("AppnoGeneratorService")
	def appNoSvc;

	@Service("SequenceService")
	def seqSvc;

	@DataContext("obo_building_application")
	def appEm;

	@DataContext("obo_building_account")
	def acctEm;

	@DataContext("obo_subapplication_type")
	def subAppType;

	@ProxyMethod
	public def create(o) {
		//if acctid does not exist create a new account
		if(!o.subapplications) throw new Exception("There must be at least one subapplication");

		if(!o.acctid) {
			def m = [controlno: "OBOACCT" + new UID() ];
			m = acctEm.create( m );
			o.acctid = m.objid;
		}

		int nextNo = seqSvc.getNextSeries( "OBO_BUILDING_APP");

		def dt = dateSvc.getServerDate();
		o.appdate = dt;
		o.appno = appNoSvc.generate( "BP-[yyyyMM]-[%05d]", nextNo  ) ;
		o.projectcost = 0;

		//include also subapplications that are required
		def reqList = subAppType.find( [required: 1]).list();
		reqList.each {
			o.subapplications << [typeid: it.objid ];
		}

		def app = appEm.create( o );

		//save the subapplications attached include also those that are required from the type
		def p = [:];
		p.processname = 'obo_building_application';
		p.refid = app.objid;
		p.startdate = dt;
		p.info = app;
		wfSvc.start(p);		

		return app;
	}

	


}