import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

class BuildingApplicationInitialService {
	
	@DataContext("building_application")
	def appEm;

	@DataContext("building_info")
	def binfoEm;

	@DataContext("vw_building_application")
	def vwAppEm;

	@DataContext("building_application_entity")
	def entityEm;

	@DataContext("building_application_subdoc")
	def subdocEm;

	@DataContext("building_application_rpu")
	def rpuEm;

	@DataContext("building_application_info")
	def appInfoEm;

	@DataContext("obo_professional")
	def professionalEm;

	@DataContext("obo_professional_info")
	def professionalInfoEm;

	@DataContext("building_application_requirement")
	def reqEm;

	@DataContext("obo_requirement_type")
	def reqTypeEm;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service(value="obo/OnlineBuildingPermitDownloadService", connection="cloud-server")
    def cloudBldgSvc;

    @Env
    def env;

    @ProxyMethod
    public def getApplication( def o  ) {
    	//check first if the application already exists
    	def app = vwAppEm.find( [trackingno: o.appid ]).first();
    	if(app) throw new Exception("Application already exists. It is currently at " + app.task?.state );
		return cloudBldgSvc.getDownloadInfo( [appid: o.appid, orgcode: env.ORGID ] );
    }

    //check if 	professional exists in the obo_professional database
    private void updateProfessional( def o ) {
    	if(!o.objid) return;
    	def p = professionalInfoEm.find( [objid: o.objid ]).first();
    	if( !p ) {
    		professionalInfoEm.create( o );
    	}
    	if(o.profid) {
    		def pp = professionalEm.find( [objid: o.profid ] ).first();
    		if(!pp) {
    			def m = [:];
    			m.objid = o.profid;
    			m.prcno = o.prc.idno;
    			m.profession = o.profession;
    			m.infoid = o.objid;
    			professionalEm.create( m );
    		}
    	}
    }

	@ProxyMethod
	public def create( def app ) {
		//check first all professionals if exist in the obo_professional table
		updateProfessional( app.contractor );
		app.ancillaries.each {
			updateProfessional( it.designprofessional );
			updateProfessional( it.supervisor );
		}

		//assign an objid to the application. This should be same value as the info.
		app.objid = "BAPP" + new UID();

		//remove application before so it can be replaced
		def applicantid = app.remove("applicantid");
		def bb = binfoEm.create( app );
		app.infoid = bb.objid;
		app.txnmode = "ONLINE";
		app.apptype = app.apptype?.toUpperCase();

		def newapp = appEm.create( app );

		app.entities.each {
			it.appid = newapp.objid;
			entityEm.create( it );
		}
		app.rpus.each {
			it.appid = newapp.objid;
			it.owner = [objid: it.ownerid ];
			rpuEm.create( it );
		}
		
		//insert items in sub doc ancillaries,accessories and all other subdocs 
		app.accessories.each {
			it.appid = newapp.objid;
			it.state = 0;
			it.doctype = [ objid: 'ACCESSORIES' ];
			it.occupancytypeid = (it.occupancytypeid!=null)?it.occupancytypeid:'';	
			it.amount = 0;		
			subdocEm.create( it );
		}

		app.ancillaries.each {
			it.appid = newapp.objid;
			it.doctype = [ objid: it.permittypeid.toUpperCase() ];
			it.amount = 0;
			it.state = 0;
			subdocEm.create( it );
		};

		//save all documents that are auto create that does not exist above
		subdocEm.getSubdocsToAutoCreate( [apptype:'building', appid: newapp.objid ]).each {
			def sd = [:];
			sd.appid = newapp.objid;
			sd.doctype = [objid: it.objid];
			sd.amount = 0;
			sd.state = 0;
			subdocEm.create( sd );			
		}

		app.infos.each {
			it.appid = newapp.objid;
			it.type = [name: it.name ];
			appInfoEm.create( it );
		}

		//immediatly accept and fire the workflow
		app = newapp;

		//calculate the cost first before receiving
		def dt = dateSvc.getServerDate();
		def param = [:];
		param.app = [apptype:app.apptype, totalfloorarea:app.totalfloorarea];
		param.occupancytype = app.occupancytype;

		def cost = costSvc.calc( param );

		//update applicant, cost and appid for info
		def u = [:];
		u.createdby = [objid: env.USERID, name: env.FULLNAME];
		u.dtcreated = dt;
		u.applicantid = applicantid;
		u.appid = newapp.objid;
		u.fixedcost = cost; 
		binfoEm.find( [objid: newapp.objid ] ).update( u );

		//update the requirements
		def reqTypes = reqTypeEm.where("permittype = 'building_application' ").list();
		reqTypes.each {
			def r = [:];
			r.appid = app.objid;
			r.state = 0;
			r.typeid = it.objid;
			r.type = [objid: it.objid];
			reqEm.create( r );
		}

		//fire the workflow to start the process
		def p = [:];
		p.processname = 'building_application';
		p.refid = app.objid;
		p.startdate = dt;
		p.info = app;
		p.assignee = [objid:env.USERID, name:env.FULLNAME];		
		wfSvc.start(p);	
		return newapp;
	}


	
}