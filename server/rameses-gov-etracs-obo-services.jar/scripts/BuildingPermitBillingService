import com.rameses.annotations.*; 

class BuildingPermitBillingService {

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit_fee")
	def appFeeEm;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@DataContext("building_permit_payment")
	def pmtEm;

	@ProxyMethod
	public def getBilling( def o ) { 
		def app = vwAppEm.find( [appno: o.refno ]).first();
		if(!app) throw new Exception("ref no" + o.refno + " not found");
		if(app.task.state != 'payment')
			throw new Exception("This is not yet for payment");
		def fees = 	appFeeEm.find( [appid: app.objid ] ).orderBy("item.sortorder").where("amount - amtpaid > 0").list().collect{
			[ objid: it.objid, account: it.item.title, amount: it.amount]
		};
		if( !fees )
			throw new Exception("There are no items for payment");
		def p = [:];
		p.objid = app.objid;
		p.appno = app.appno;
		p.permittype = "BUILDING PERMIT";
		p.apptype = app.apptype;		
		p.title = app.title;
		p.address = app.location?.lotno + ' ' + app.location?.barangay;
		p.applicant = app.applicant.name;
		p.applicantaddress = app.applicant.address?.text;
		p.items = fees; 
		p.amount = p.items.sum{it.amount};
		p.expirydate = dateSvc.getServerDate();
		p.txntype = "building_permit";

 		p.mobileno = app.contact?.mobileno;
		p.email = app.contact?.email;
		return p;
	}

	@ProxyMethod
	public def getPaymentOrderInfo( def o ) {
		//build the info beforehand for payment order purpose. This is the one saved to payment order.
		def p = getBilling( o );
		
		def m = [:];
		m.payer = [objid:'X', name: p.applicant];
		m.paidby = p.applicant;
		m.paidbyaddress = p.applicantaddress;
		m.particulars = 'Building Permit';
		m.refid = p.objid;
		m.refno = o.refno;
		m.info = [appid: p.objid];
		m.amount = p.amount;
		m.txntype = 'building_permit';
		m.txntypename = 'Building Permit';
		m.expirydate = p.expirydate;
		m.mobileno = p.mobileno;
		m.email = p.email;
		return m;
	}

	@ProxyMethod
	public def getPaymentDetails( def po ) { 
		//the parameter passed here is the payment order. The reference id is the application
		def appid = po.refid;

		def app = vwAppEm.find( [objid: appid ]).first();
		def fees = 	appFeeEm.find( [appid: app.objid ] ).orderBy("item.sortorder").where("amount - amtpaid > 0").list().collect{
			[  item: it.item.item, amount: it.amount]
		}	
		po.appid = app.objid;
		po.items = fees;
		return po;
	}

	@ProxyMethod
	public void postPayment( def po ) { 
		def rct = po.receipt;
		def appid = po.refid;

		//create the payment
		def receipt = [:];
		receipt.appid = appid;
		receipt.refno = rct.receiptno;
		receipt.reftype = rct.type;
		receipt.refid = rct.objid;
		receipt.refdate = rct.receiptdate;
		receipt.voided = 0;
		pmtEm.create( receipt );

		//post to the ledger
		def app = vwAppEm.find( [objid: appid ] ).first();
		appFeeEm.find([appid: app.objid]).update( [amtpaid: "{amount}"] );

		//fire the workflow for release.
		def m = [:];
		m.processname = "building_permit";
		m.taskid = app.taskid;
		m.refid = app.objid;
		m.action = "post";
		wfSvc.signal(m);		
		return null;
	} 


}
