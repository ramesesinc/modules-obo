import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;
import enterprise.utils.*;

public class OboAssessmentService  {

	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("obo_itemaccount")
	def itemAccountEm;


	@ProxyMethod
	public def assess(o) {
		def res = billingRuleSvc.execute( [rulename:'oboassessment', params: o, include_items: false ] );
		def bitems = [];
		res.billitems.findAll{ it.billcode && it.item == null }.each {
			def p = itemAccountEm.find( [objid: it.billcode ] ).first()
			if( o.sectionid ) {
				if(p.type.objid == o.sectionid ) {
					it.item = p;
					it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
					bitems << it;				
				}
			}
			else {
				it.item = p;
				it.sortorder = (p.sortorder == null ? 100 : p.sortorder);
				bitems << it;				
			}
		}
		def billitems = bitems.findAll{ it.amount > 0 }.sort{ it.sortorder };
		return billitems;
	}

}