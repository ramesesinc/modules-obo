import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import obo.facts.*;
import java.text.*;
import treasury.utils.*;
import treasury.facts.*;

class BuildingApplicationInitialService {
	
	@DataContext("building_permit")
	def appEm;

	@DataContext("vw_building_permit")
	def vwAppEm;

	@DataContext("building_permit_entity")
	def entityEm;

	@DataContext("building_permit_doc")
	def subdocEm;

	@DataContext("building_permit_rpu")
	def rpuEm;

	@DataContext("building_permit_info")
	def appInfoEm;

	@DataContext("obo_professional")
	def professionalEm;

	@DataContext("obo_professional_info")
	def professionalInfoEm;

	@DataContext("building_permit_requirement")
	def reqEm;

	@DataContext("obo_requirement_type")
	def reqTypeEm;

	@Service("OboConstructionCostRuleService")
	def costSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@Service(value="obo/OnlineBuildingPermitDownloadService", connection="cloud-server")
    def cloudBldgSvc;

    @Env
    def env;

    @ProxyMethod
    public def getApplication( def o  ) {
    	//check first if the application already exists
    	def app = vwAppEm.find( [trackingno: o.appid ]).first();
    	if(app) throw new Exception("Application already exists. It is currently at " + app.task?.state );
		return cloudBldgSvc.getDownloadInfo( [appid: o.appid, orgcode: env.ORGID ] );
    }

    //check if 	professional exists in the obo_professional database
    private void updateProfessional( def o ) {
    	if(!o.objid) return;
    	def p = professionalInfoEm.find( [objid: o.objid ]).first();
    	if( !p ) {
    		professionalInfoEm.create( o );
    	}
    	if(o.profid) {
    		def pp = professionalEm.find( [objid: o.profid ] ).first();
    		if(!pp) {
    			def m = [:];
    			m.objid = o.profid;
    			m.prcno = o.prc.idno;
    			m.profession = o.profession;
    			m.infoid = o.objid;
    			professionalEm.create( m );
    		}
    	}
    }

	@ProxyMethod
	public def create( def app ) {
		//calculate the cost first before receiving
		def dt = dateSvc.getServerDate();

		//check first all professionals if exist in the obo_professional table
		updateProfessional( app.supervisor );

		app.ancillaries.each {
			updateProfessional( it.designprofessional );
			updateProfessional( it.supervisor );			
		}



		//assign an objid to the application. This should be same value as the info.
		app.objid = "BAPP" + new UID();

		//remove application before so it can be replaced
		def applicantid = app.remove("applicantid");
		app.txnmode = "ONLINE";
		app.apptype = app.apptype?.toUpperCase();
		app.createdby = [objid: env.USERID, name: env.FULLNAME];
		app.dtcreated = dt;

		app = appEm.create( app );

		
	}

	
}